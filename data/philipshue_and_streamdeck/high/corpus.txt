if streamdeck button zero is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
when streamdeck button zero is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
if button zero is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
when button zero is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once button zero pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once streamdeck button zero pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
if streamdeck button zero is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
when streamdeck button zero is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
if button zero is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
when button zero is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once button zero pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once streamdeck button zero pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone push the button zero on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button zero on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
if streamdeck button zero is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
when streamdeck button zero is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
if button zero is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
when button zero is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once button zero pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once streamdeck button zero pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
if streamdeck button zero is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
when streamdeck button zero is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
if button zero is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
when button zero is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once button zero pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once streamdeck button zero pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone push the button zero on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone press the button zero on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button zero on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone hit the button zero on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button zero on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone click the button zero on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone press the button zero on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button zero on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone hit the button zero on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button zero on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone click the button zero on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button zero on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone press the button zero on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button zero gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button zero gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Should someone click the button zero on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button zero is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', White)};
if streamdeck button zero is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button zero is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
if button zero is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
when button zero is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once button zero pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button zero pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button zero is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button zero is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
if button zero is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
when button zero is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once button zero pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button zero pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button zero on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button zero is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button zero is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
if button zero is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
when button zero is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once button zero pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button zero pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button zero is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button zero is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
if button zero is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
when button zero is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once button zero pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button zero pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button zero on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button zero on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button zero on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button zero on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button zero on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button zero on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button zero on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button zero on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button zero gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button zero gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button zero is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button zero is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button zero is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
if button zero is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
when button zero is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once button zero pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button zero pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button zero is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button zero is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
if button zero is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
when button zero is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once button zero pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button zero pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button zero on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button zero is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button zero is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
if button zero is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
when button zero is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once button zero pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button zero pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button zero is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button zero is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
if button zero is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
when button zero is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once button zero pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button zero pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button zero on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button zero on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button zero on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button zero on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button zero on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button zero on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button zero on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button zero on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button zero gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button zero gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button zero is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button zero is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
when streamdeck button zero is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
if button zero is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
when button zero is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once button zero pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button zero pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
if streamdeck button zero is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
when streamdeck button zero is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
if button zero is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
when button zero is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once button zero pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button zero pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone push the button zero on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
if streamdeck button zero is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
when streamdeck button zero is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
if button zero is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
when button zero is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once button zero pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button zero pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
if streamdeck button zero is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
when streamdeck button zero is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
if button zero is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
when button zero is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once button zero pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button zero pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone press the button zero on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button zero on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone click the button zero on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone press the button zero on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button zero on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button zero on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button zero on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone click the button zero on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button zero gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button zero gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button zero is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Black)};
if streamdeck button zero is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
when streamdeck button zero is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
if button zero is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
when button zero is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once button zero pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button zero pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
if streamdeck button zero is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
when streamdeck button zero is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
if button zero is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
when button zero is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once button zero pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button zero pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone push the button zero on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
if streamdeck button zero is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
when streamdeck button zero is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
if button zero is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
when button zero is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once button zero pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button zero pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
if streamdeck button zero is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
when streamdeck button zero is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
if button zero is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
when button zero is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once button zero pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button zero pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone press the button zero on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button zero on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone click the button zero on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone press the button zero on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button zero on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button zero on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button zero on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone click the button zero on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button zero gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button zero gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button zero is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Red)};
if streamdeck button zero is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button zero is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
if button zero is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
when button zero is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once button zero pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button zero pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button zero is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button zero is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
if button zero is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
when button zero is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once button zero pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button zero pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button zero on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button zero is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button zero is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
if button zero is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
when button zero is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once button zero pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button zero pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button zero is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button zero is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
if button zero is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
when button zero is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once button zero pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button zero pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button zero on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button zero on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button zero on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button zero on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button zero on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button zero on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button zero on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button zero on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button zero gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button zero gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button zero is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button zero is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button zero is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
if button zero is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
when button zero is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once button zero pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button zero pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button zero is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button zero is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
if button zero is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
when button zero is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once button zero pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button zero pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button zero on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button zero is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button zero is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
if button zero is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
when button zero is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once button zero pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button zero pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button zero is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button zero is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
if button zero is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
when button zero is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once button zero pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button zero pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button zero on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button zero on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button zero on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button zero on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button zero on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button zero on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button zero on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button zero on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button zero gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button zero gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button zero is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button zero is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button zero is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
if button zero is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
when button zero is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once button zero pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button zero pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button zero is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button zero is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
if button zero is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
when button zero is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once button zero pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button zero pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button zero on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button zero is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button zero is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
if button zero is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
when button zero is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once button zero pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button zero pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button zero is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button zero is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
if button zero is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
when button zero is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once button zero pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button zero pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button zero on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button zero on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button zero on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button zero on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button zero on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button zero on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button zero on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button zero on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button zero gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button zero gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button zero is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button zero is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button zero is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
if button zero is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
when button zero is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once button zero pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button zero pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button zero is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button zero is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
if button zero is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
when button zero is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once button zero pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button zero pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button zero on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button zero is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button zero is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
if button zero is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
when button zero is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once button zero pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button zero pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button zero is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button zero is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
if button zero is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
when button zero is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once button zero pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button zero pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button zero on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button zero on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button zero on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button zero on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button zero on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button zero on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button zero on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button zero on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button zero gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button zero gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button zero is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button zero is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
when streamdeck button zero is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
if button zero is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
when button zero is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once button zero pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button zero pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
if streamdeck button zero is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
when streamdeck button zero is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
if button zero is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
when button zero is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once button zero pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button zero pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone push the button zero on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
if streamdeck button zero is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
when streamdeck button zero is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
if button zero is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
when button zero is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once button zero pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button zero pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
if streamdeck button zero is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
when streamdeck button zero is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
if button zero is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
when button zero is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once button zero pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button zero pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone press the button zero on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button zero on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone click the button zero on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone press the button zero on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button zero on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button zero on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button zero on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone click the button zero on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button zero gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button zero gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button zero is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Green)};
if streamdeck button zero is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button zero is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
if button zero is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
when button zero is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once button zero pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button zero pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button zero is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button zero is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
if button zero is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
when button zero is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once button zero pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button zero pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button zero on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button zero is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button zero is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
if button zero is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
when button zero is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once button zero pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button zero pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button zero is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button zero is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
if button zero is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
when button zero is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once button zero pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button zero pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button zero on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button zero on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button zero on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button zero on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button zero on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button zero on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button zero on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button zero on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button zero gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button zero gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button zero is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button zero is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button zero is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
if button zero is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
when button zero is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once button zero pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button zero pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button zero is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button zero is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
if button zero is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
when button zero is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once button zero pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button zero pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button zero on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button zero is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button zero is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
if button zero is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
when button zero is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once button zero pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button zero pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button zero is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button zero is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
if button zero is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
when button zero is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once button zero pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button zero pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button zero on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button zero on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button zero on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button zero on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button zero on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button zero on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button zero on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button zero on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button zero gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button zero gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button zero is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button zero is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button zero is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
if button zero is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
when button zero is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once button zero pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button zero pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button zero is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button zero is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
if button zero is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
when button zero is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once button zero pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button zero pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button zero on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button zero is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button zero is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
if button zero is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
when button zero is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once button zero pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button zero pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button zero is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button zero is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
if button zero is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
when button zero is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once button zero pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button zero pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button zero on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button zero on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button zero on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button zero on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button zero on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button zero on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button zero on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button zero on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button zero gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button zero gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button zero is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button zero is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button zero is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
if button zero is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
when button zero is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once button zero pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button zero pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button zero is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button zero is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
if button zero is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
when button zero is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once button zero pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button zero pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button zero on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button zero is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button zero is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
if button zero is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
when button zero is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once button zero pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button zero pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button zero is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button zero is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
if button zero is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
when button zero is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once button zero pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button zero pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button zero on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button zero on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button zero on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button zero on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button zero on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button zero on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button zero on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button zero on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button zero gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button zero gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button zero is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button zero is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button zero is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
if button zero is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
when button zero is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once button zero pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button zero pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button zero is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button zero is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
if button zero is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
when button zero is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once button zero pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button zero pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button zero on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button zero is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button zero is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
if button zero is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
when button zero is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once button zero pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button zero pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button zero is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button zero is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
if button zero is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
when button zero is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once button zero pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button zero pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button zero on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button zero on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button zero on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button zero on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button zero on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button zero on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button zero on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button zero on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button zero gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button zero gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button zero is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button zero is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button zero is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
if button zero is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
when button zero is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once button zero pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button zero pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button zero is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button zero is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
if button zero is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
when button zero is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once button zero pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button zero pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button zero on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button zero on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button zero on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button zero on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button zero on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button zero is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button zero is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
if button zero is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
when button zero is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once button zero pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button zero pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button zero is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button zero is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
if button zero is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
when button zero is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once button zero pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button zero pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button zero on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button zero on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button zero on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button zero on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button zero on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button zero on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button zero on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button zero on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button zero on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button zero on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button zero on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button zero on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button zero on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button zero on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button zero on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button zero on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button zero on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button zero gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button zero gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button zero on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button zero is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
Once the button zero on the StreamDeck is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button one is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
when streamdeck button one is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
if button one is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
when button one is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once button one pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once streamdeck button one pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
if streamdeck button one is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
when streamdeck button one is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
if button one is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
when button one is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once button one pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once streamdeck button one pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone push the button one on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button one on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone press the button one on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone click the button one on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
if streamdeck button one is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
when streamdeck button one is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
if button one is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
when button one is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once button one pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once streamdeck button one pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
if streamdeck button one is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
when streamdeck button one is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
if button one is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
when button one is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once button one pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once streamdeck button one pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone push the button one on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone press the button one on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button one on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone hit the button one on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button one on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone click the button one on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button one on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone press the button one on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button one on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone hit the button one on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button one on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone click the button one on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button one on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone press the button one on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone hit the button one on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button one gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button one gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Should someone click the button one on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button one is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
Once the button one on the StreamDeck is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', White)};
if streamdeck button one is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button one is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
if button one is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
when button one is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once button one pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button one pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button one is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button one is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
if button one is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
when button one is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once button one pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button one pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button one on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button one on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button one is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button one is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
if button one is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
when button one is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once button one pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button one pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button one is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button one is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
if button one is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
when button one is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once button one pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button one pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button one on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button one on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button one on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button one on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button one on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button one on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button one on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button one on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button one on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button one on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button one on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button one on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button one on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button one gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button one gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button one on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button one is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button one is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button one is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
if button one is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
when button one is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once button one pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button one pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button one is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button one is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
if button one is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
when button one is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once button one pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button one pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button one on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button one on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button one is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button one is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
if button one is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
when button one is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once button one pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button one pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button one is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button one is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
if button one is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
when button one is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once button one pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button one pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button one on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button one on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button one on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button one on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button one on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button one on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button one on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button one on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button one on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button one on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button one on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button one on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button one on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button one gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button one gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button one on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button one is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button one is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
when streamdeck button one is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
if button one is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
when button one is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once button one pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button one pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
if streamdeck button one is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
when streamdeck button one is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
if button one is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
when button one is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once button one pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button one pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone push the button one on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button one on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
if streamdeck button one is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
when streamdeck button one is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
if button one is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
when button one is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once button one pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button one pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
if streamdeck button one is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
when streamdeck button one is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
if button one is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
when button one is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once button one pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button one pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone push the button one on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone press the button one on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button one on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button one on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button one on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone click the button one on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone press the button one on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button one on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button one on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button one on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone click the button one on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button one on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone press the button one on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button one gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button one gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Should someone click the button one on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button one is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Black)};
if streamdeck button one is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
when streamdeck button one is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
if button one is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
when button one is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once button one pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button one pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
if streamdeck button one is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
when streamdeck button one is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
if button one is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
when button one is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once button one pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button one pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone push the button one on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button one on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
if streamdeck button one is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
when streamdeck button one is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
if button one is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
when button one is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once button one pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button one pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
if streamdeck button one is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
when streamdeck button one is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
if button one is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
when button one is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once button one pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button one pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone push the button one on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone press the button one on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button one on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button one on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button one on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone click the button one on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone press the button one on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button one on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button one on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button one on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone click the button one on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button one on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone press the button one on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button one gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button one gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Should someone click the button one on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button one is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Red)};
if streamdeck button one is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button one is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
if button one is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
when button one is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once button one pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button one pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button one is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button one is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
if button one is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
when button one is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once button one pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button one pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button one on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button one on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button one is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button one is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
if button one is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
when button one is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once button one pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button one pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button one is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button one is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
if button one is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
when button one is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once button one pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button one pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button one on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button one on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button one on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button one on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button one on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button one on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button one on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button one on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button one on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button one on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button one on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button one on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button one on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button one gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button one gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button one on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button one is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button one is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button one is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
if button one is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
when button one is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once button one pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button one pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button one is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button one is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
if button one is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
when button one is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once button one pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button one pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button one on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button one on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button one is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button one is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
if button one is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
when button one is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once button one pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button one pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button one is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button one is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
if button one is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
when button one is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once button one pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button one pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button one on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button one on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button one on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button one on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button one on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button one on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button one on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button one on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button one on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button one on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button one on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button one on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button one on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button one gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button one gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button one on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button one is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button one is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button one is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
if button one is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
when button one is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once button one pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button one pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button one is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button one is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
if button one is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
when button one is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once button one pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button one pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button one on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button one on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button one is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button one is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
if button one is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
when button one is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once button one pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button one pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button one is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button one is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
if button one is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
when button one is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once button one pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button one pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button one on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button one on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button one on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button one on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button one on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button one on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button one on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button one on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button one on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button one on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button one on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button one on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button one on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button one gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button one gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button one on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button one is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button one is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button one is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
if button one is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
when button one is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once button one pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button one pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button one is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button one is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
if button one is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
when button one is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once button one pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button one pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button one on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button one on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button one is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button one is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
if button one is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
when button one is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once button one pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button one pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button one is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button one is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
if button one is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
when button one is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once button one pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button one pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button one on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button one on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button one on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button one on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button one on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button one on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button one on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button one on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button one on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button one on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button one on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button one on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button one on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button one gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button one gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button one on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button one is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button one is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
when streamdeck button one is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
if button one is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
when button one is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once button one pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button one pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
if streamdeck button one is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
when streamdeck button one is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
if button one is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
when button one is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once button one pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button one pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone push the button one on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button one on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
if streamdeck button one is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
when streamdeck button one is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
if button one is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
when button one is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once button one pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button one pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
if streamdeck button one is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
when streamdeck button one is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
if button one is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
when button one is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once button one pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button one pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone push the button one on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone press the button one on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button one on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button one on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button one on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone click the button one on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone press the button one on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button one on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button one on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button one on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone click the button one on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button one on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone press the button one on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button one gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button one gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Should someone click the button one on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button one is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Green)};
if streamdeck button one is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button one is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
if button one is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
when button one is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once button one pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button one pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button one is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button one is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
if button one is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
when button one is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once button one pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button one pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button one on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button one on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button one is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button one is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
if button one is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
when button one is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once button one pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button one pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button one is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button one is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
if button one is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
when button one is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once button one pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button one pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button one on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button one on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button one on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button one on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button one on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button one on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button one on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button one on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button one on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button one on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button one on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button one on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button one on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button one gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button one gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button one on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button one is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button one is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button one is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
if button one is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
when button one is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once button one pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button one pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button one is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button one is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
if button one is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
when button one is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once button one pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button one pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button one on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button one on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button one is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button one is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
if button one is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
when button one is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once button one pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button one pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button one is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button one is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
if button one is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
when button one is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once button one pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button one pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button one on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button one on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button one on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button one on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button one on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button one on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button one on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button one on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button one on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button one on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button one on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button one on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button one on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button one gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button one gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button one on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button one is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button one is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button one is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
if button one is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
when button one is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once button one pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button one pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button one is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button one is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
if button one is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
when button one is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once button one pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button one pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button one on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button one on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button one is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button one is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
if button one is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
when button one is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once button one pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button one pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button one is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button one is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
if button one is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
when button one is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once button one pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button one pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button one on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button one on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button one on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button one on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button one on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button one on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button one on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button one on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button one on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button one on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button one on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button one on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button one on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button one gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button one gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button one on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button one is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button one is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button one is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
if button one is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
when button one is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once button one pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button one pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button one is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button one is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
if button one is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
when button one is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once button one pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button one pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button one on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button one on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button one is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button one is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
if button one is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
when button one is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once button one pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button one pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button one is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button one is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
if button one is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
when button one is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once button one pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button one pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button one on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button one on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button one on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button one on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button one on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button one on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button one on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button one on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button one on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button one on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button one on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button one on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button one on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button one gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button one gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button one on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button one is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button one is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button one is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
if button one is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
when button one is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once button one pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button one pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button one is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button one is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
if button one is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
when button one is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once button one pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button one pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button one on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button one on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button one is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button one is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
if button one is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
when button one is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once button one pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button one pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button one is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button one is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
if button one is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
when button one is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once button one pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button one pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button one on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button one on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button one on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button one on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button one on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button one on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button one on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button one on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button one on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button one on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button one on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button one on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button one on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button one gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button one gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button one on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button one is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button one is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button one is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
if button one is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
when button one is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once button one pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button one pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button one is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button one is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
if button one is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
when button one is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once button one pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button one pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button one on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button one on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button one on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button one on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button one on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button one on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button one on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button one is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button one is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
if button one is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
when button one is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once button one pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button one pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button one is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button one is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
if button one is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
when button one is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once button one pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button one pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button one on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button one on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button one on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button one on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button one on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button one on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button one on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button one on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button one on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button one on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button one on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button one on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button one on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button one on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button one on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button one on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button one on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button one on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button one gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button one gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button one on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button one on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button one is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
Once the button one on the StreamDeck is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button two is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
when streamdeck button two is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
if button two is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
when button two is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once button two pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once streamdeck button two pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
if streamdeck button two is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
when streamdeck button two is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
if button two is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
when button two is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once button two pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once streamdeck button two pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone push the button two on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button two on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone press the button two on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone click the button two on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
if streamdeck button two is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
when streamdeck button two is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
if button two is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
when button two is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once button two pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once streamdeck button two pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
if streamdeck button two is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
when streamdeck button two is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
if button two is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
when button two is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once button two pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once streamdeck button two pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone push the button two on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone press the button two on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button two on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone hit the button two on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button two on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone click the button two on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button two on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone press the button two on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button two on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone hit the button two on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button two on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone click the button two on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button two on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone press the button two on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone hit the button two on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button two gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button two gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Should someone click the button two on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button two is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
Once the button two on the StreamDeck is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', White)};
if streamdeck button two is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button two is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
if button two is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
when button two is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once button two pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button two pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button two is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button two is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
if button two is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
when button two is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once button two pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button two pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button two on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button two on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button two is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button two is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
if button two is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
when button two is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once button two pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button two pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button two is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button two is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
if button two is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
when button two is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once button two pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button two pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button two on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button two on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button two on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button two on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button two on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button two on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button two on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button two on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button two on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button two on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button two on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button two on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button two on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button two gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button two gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button two on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button two is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button two is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button two is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
if button two is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
when button two is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once button two pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button two pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button two is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button two is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
if button two is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
when button two is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once button two pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button two pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button two on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button two on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button two is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button two is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
if button two is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
when button two is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once button two pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button two pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button two is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button two is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
if button two is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
when button two is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once button two pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button two pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button two on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button two on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button two on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button two on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button two on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button two on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button two on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button two on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button two on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button two on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button two on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button two on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button two on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button two gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button two gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button two on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button two is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button two is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
when streamdeck button two is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
if button two is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
when button two is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once button two pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button two pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
if streamdeck button two is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
when streamdeck button two is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
if button two is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
when button two is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once button two pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button two pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone push the button two on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button two on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
if streamdeck button two is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
when streamdeck button two is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
if button two is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
when button two is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once button two pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button two pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
if streamdeck button two is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
when streamdeck button two is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
if button two is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
when button two is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once button two pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button two pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone push the button two on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone press the button two on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button two on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button two on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button two on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone click the button two on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone press the button two on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button two on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button two on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button two on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone click the button two on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button two on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone press the button two on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button two gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button two gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Should someone click the button two on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button two is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Black)};
if streamdeck button two is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
when streamdeck button two is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
if button two is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
when button two is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once button two pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button two pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
if streamdeck button two is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
when streamdeck button two is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
if button two is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
when button two is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once button two pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button two pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone push the button two on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button two on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
if streamdeck button two is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
when streamdeck button two is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
if button two is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
when button two is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once button two pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button two pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
if streamdeck button two is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
when streamdeck button two is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
if button two is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
when button two is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once button two pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button two pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone push the button two on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone press the button two on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button two on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button two on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button two on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone click the button two on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone press the button two on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button two on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button two on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button two on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone click the button two on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button two on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone press the button two on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button two gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button two gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Should someone click the button two on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button two is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Red)};
if streamdeck button two is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button two is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
if button two is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
when button two is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once button two pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button two pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button two is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button two is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
if button two is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
when button two is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once button two pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button two pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button two on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button two on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button two is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button two is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
if button two is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
when button two is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once button two pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button two pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button two is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button two is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
if button two is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
when button two is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once button two pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button two pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button two on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button two on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button two on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button two on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button two on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button two on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button two on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button two on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button two on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button two on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button two on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button two on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button two on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button two gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button two gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button two on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button two is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button two is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button two is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
if button two is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
when button two is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once button two pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button two pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button two is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button two is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
if button two is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
when button two is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once button two pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button two pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button two on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button two on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button two is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button two is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
if button two is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
when button two is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once button two pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button two pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button two is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button two is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
if button two is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
when button two is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once button two pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button two pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button two on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button two on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button two on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button two on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button two on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button two on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button two on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button two on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button two on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button two on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button two on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button two on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button two on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button two gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button two gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button two on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button two is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button two is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button two is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
if button two is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
when button two is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once button two pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button two pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button two is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button two is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
if button two is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
when button two is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once button two pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button two pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button two on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button two on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button two is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button two is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
if button two is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
when button two is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once button two pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button two pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button two is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button two is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
if button two is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
when button two is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once button two pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button two pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button two on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button two on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button two on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button two on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button two on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button two on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button two on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button two on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button two on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button two on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button two on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button two on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button two on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button two gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button two gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button two on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button two is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button two is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button two is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
if button two is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
when button two is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once button two pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button two pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button two is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button two is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
if button two is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
when button two is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once button two pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button two pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button two on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button two on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button two is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button two is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
if button two is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
when button two is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once button two pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button two pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button two is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button two is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
if button two is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
when button two is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once button two pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button two pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button two on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button two on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button two on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button two on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button two on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button two on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button two on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button two on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button two on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button two on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button two on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button two on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button two on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button two gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button two gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button two on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button two is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button two is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
when streamdeck button two is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
if button two is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
when button two is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once button two pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button two pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
if streamdeck button two is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
when streamdeck button two is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
if button two is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
when button two is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once button two pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button two pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone push the button two on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button two on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
if streamdeck button two is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
when streamdeck button two is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
if button two is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
when button two is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once button two pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button two pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
if streamdeck button two is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
when streamdeck button two is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
if button two is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
when button two is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once button two pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button two pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone push the button two on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone press the button two on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button two on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button two on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button two on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone click the button two on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone press the button two on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button two on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button two on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button two on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone click the button two on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button two on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone press the button two on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button two gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button two gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Should someone click the button two on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button two is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Green)};
if streamdeck button two is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button two is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
if button two is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
when button two is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once button two pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button two pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button two is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button two is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
if button two is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
when button two is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once button two pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button two pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button two on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button two on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button two is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button two is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
if button two is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
when button two is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once button two pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button two pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button two is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button two is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
if button two is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
when button two is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once button two pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button two pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button two on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button two on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button two on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button two on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button two on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button two on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button two on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button two on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button two on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button two on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button two on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button two on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button two on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button two gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button two gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button two on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button two is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button two is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button two is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
if button two is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
when button two is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once button two pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button two pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button two is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button two is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
if button two is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
when button two is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once button two pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button two pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button two on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button two on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button two is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button two is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
if button two is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
when button two is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once button two pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button two pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button two is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button two is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
if button two is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
when button two is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once button two pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button two pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button two on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button two on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button two on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button two on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button two on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button two on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button two on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button two on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button two on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button two on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button two on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button two on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button two on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button two gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button two gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button two on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button two is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button two is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button two is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
if button two is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
when button two is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once button two pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button two pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button two is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button two is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
if button two is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
when button two is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once button two pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button two pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button two on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button two on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button two is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button two is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
if button two is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
when button two is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once button two pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button two pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button two is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button two is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
if button two is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
when button two is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once button two pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button two pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button two on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button two on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button two on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button two on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button two on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button two on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button two on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button two on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button two on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button two on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button two on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button two on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button two on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button two gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button two gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button two on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button two is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button two is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button two is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
if button two is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
when button two is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once button two pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button two pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button two is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button two is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
if button two is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
when button two is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once button two pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button two pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button two on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button two on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button two is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button two is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
if button two is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
when button two is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once button two pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button two pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button two is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button two is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
if button two is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
when button two is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once button two pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button two pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button two on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button two on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button two on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button two on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button two on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button two on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button two on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button two on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button two on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button two on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button two on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button two on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button two on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button two gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button two gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button two on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button two is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button two is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button two is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
if button two is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
when button two is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once button two pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button two pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button two is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button two is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
if button two is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
when button two is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once button two pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button two pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button two on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button two on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button two is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button two is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
if button two is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
when button two is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once button two pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button two pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button two is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button two is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
if button two is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
when button two is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once button two pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button two pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button two on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button two on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button two on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button two on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button two on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button two on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button two on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button two on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button two on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button two on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button two on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button two on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button two on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button two gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button two gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button two on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button two is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button two is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button two is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
if button two is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
when button two is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once button two pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button two pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button two is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button two is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
if button two is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
when button two is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once button two pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button two pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button two on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button two on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button two on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button two on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button two on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button two on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button two on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button two is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button two is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
if button two is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
when button two is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once button two pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button two pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button two is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button two is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
if button two is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
when button two is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once button two pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button two pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button two on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button two on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button two on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button two on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button two on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button two on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button two on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button two on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button two on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button two on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button two on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button two on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button two on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button two on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button two on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button two on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button two on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button two on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button two gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button two gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button two on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button two on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button two is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
Once the button two on the StreamDeck is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button three is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
when streamdeck button three is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
if button three is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
when button three is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once button three pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once streamdeck button three pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
if streamdeck button three is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
when streamdeck button three is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
if button three is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
when button three is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once button three pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once streamdeck button three pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone push the button three on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button three on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone press the button three on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone click the button three on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
if streamdeck button three is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
when streamdeck button three is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
if button three is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
when button three is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once button three pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once streamdeck button three pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
if streamdeck button three is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
when streamdeck button three is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
if button three is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
when button three is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once button three pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once streamdeck button three pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone push the button three on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone press the button three on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button three on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone hit the button three on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button three on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone click the button three on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button three on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone press the button three on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button three on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone hit the button three on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button three on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone click the button three on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button three on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone press the button three on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone hit the button three on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button three gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button three gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Should someone click the button three on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button three is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
Once the button three on the StreamDeck is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', White)};
if streamdeck button three is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button three is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
if button three is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
when button three is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once button three pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button three pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button three is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button three is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
if button three is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
when button three is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once button three pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button three pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button three on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button three on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button three is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button three is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
if button three is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
when button three is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once button three pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button three pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button three is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button three is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
if button three is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
when button three is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once button three pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button three pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button three on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button three on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button three on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button three on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button three on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button three on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button three on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button three on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button three on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button three on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button three on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button three on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button three on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button three gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button three gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button three on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button three is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button three is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button three is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
if button three is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
when button three is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once button three pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button three pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button three is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button three is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
if button three is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
when button three is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once button three pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button three pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button three on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button three on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button three is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button three is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
if button three is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
when button three is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once button three pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button three pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button three is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button three is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
if button three is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
when button three is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once button three pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button three pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button three on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button three on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button three on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button three on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button three on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button three on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button three on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button three on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button three on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button three on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button three on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button three on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button three on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button three gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button three gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button three on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button three is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button three is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
when streamdeck button three is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
if button three is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
when button three is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once button three pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button three pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
if streamdeck button three is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
when streamdeck button three is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
if button three is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
when button three is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once button three pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button three pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone push the button three on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button three on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
if streamdeck button three is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
when streamdeck button three is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
if button three is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
when button three is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once button three pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button three pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
if streamdeck button three is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
when streamdeck button three is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
if button three is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
when button three is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once button three pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button three pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone push the button three on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone press the button three on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button three on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button three on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button three on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone click the button three on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone press the button three on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button three on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button three on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button three on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone click the button three on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button three on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone press the button three on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button three gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button three gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Should someone click the button three on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button three is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Black)};
if streamdeck button three is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
when streamdeck button three is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
if button three is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
when button three is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once button three pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button three pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
if streamdeck button three is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
when streamdeck button three is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
if button three is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
when button three is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once button three pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button three pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone push the button three on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button three on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
if streamdeck button three is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
when streamdeck button three is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
if button three is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
when button three is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once button three pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button three pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
if streamdeck button three is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
when streamdeck button three is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
if button three is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
when button three is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once button three pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button three pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone push the button three on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone press the button three on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button three on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button three on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button three on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone click the button three on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone press the button three on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button three on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button three on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button three on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone click the button three on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button three on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone press the button three on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button three gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button three gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Should someone click the button three on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button three is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Red)};
if streamdeck button three is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button three is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
if button three is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
when button three is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once button three pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button three pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button three is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button three is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
if button three is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
when button three is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once button three pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button three pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button three on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button three on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button three is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button three is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
if button three is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
when button three is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once button three pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button three pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button three is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button three is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
if button three is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
when button three is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once button three pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button three pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button three on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button three on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button three on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button three on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button three on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button three on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button three on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button three on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button three on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button three on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button three on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button three on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button three on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button three gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button three gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button three on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button three is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button three is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button three is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
if button three is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
when button three is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once button three pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button three pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button three is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button three is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
if button three is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
when button three is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once button three pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button three pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button three on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button three on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button three is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button three is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
if button three is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
when button three is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once button three pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button three pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button three is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button three is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
if button three is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
when button three is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once button three pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button three pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button three on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button three on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button three on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button three on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button three on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button three on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button three on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button three on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button three on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button three on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button three on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button three on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button three on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button three gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button three gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button three on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button three is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button three is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button three is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
if button three is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
when button three is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once button three pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button three pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button three is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button three is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
if button three is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
when button three is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once button three pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button three pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button three on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button three on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button three is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button three is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
if button three is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
when button three is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once button three pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button three pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button three is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button three is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
if button three is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
when button three is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once button three pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button three pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button three on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button three on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button three on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button three on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button three on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button three on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button three on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button three on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button three on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button three on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button three on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button three on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button three on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button three gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button three gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button three on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button three is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button three is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button three is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
if button three is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
when button three is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once button three pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button three pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button three is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button three is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
if button three is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
when button three is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once button three pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button three pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button three on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button three on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button three is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button three is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
if button three is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
when button three is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once button three pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button three pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button three is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button three is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
if button three is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
when button three is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once button three pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button three pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button three on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button three on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button three on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button three on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button three on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button three on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button three on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button three on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button three on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button three on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button three on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button three on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button three on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button three gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button three gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button three on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button three is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button three is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
when streamdeck button three is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
if button three is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
when button three is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once button three pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button three pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
if streamdeck button three is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
when streamdeck button three is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
if button three is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
when button three is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once button three pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button three pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone push the button three on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button three on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
if streamdeck button three is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
when streamdeck button three is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
if button three is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
when button three is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once button three pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button three pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
if streamdeck button three is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
when streamdeck button three is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
if button three is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
when button three is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once button three pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button three pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone push the button three on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone press the button three on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button three on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button three on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button three on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone click the button three on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone press the button three on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button three on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button three on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button three on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone click the button three on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button three on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone press the button three on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button three gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button three gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Should someone click the button three on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button three is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Green)};
if streamdeck button three is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button three is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
if button three is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
when button three is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once button three pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button three pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button three is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button three is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
if button three is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
when button three is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once button three pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button three pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button three on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button three on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button three is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button three is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
if button three is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
when button three is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once button three pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button three pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button three is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button three is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
if button three is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
when button three is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once button three pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button three pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button three on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button three on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button three on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button three on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button three on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button three on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button three on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button three on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button three on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button three on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button three on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button three on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button three on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button three gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button three gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button three on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button three is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button three is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button three is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
if button three is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
when button three is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once button three pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button three pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button three is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button three is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
if button three is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
when button three is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once button three pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button three pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button three on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button three on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button three is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button three is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
if button three is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
when button three is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once button three pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button three pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button three is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button three is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
if button three is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
when button three is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once button three pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button three pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button three on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button three on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button three on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button three on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button three on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button three on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button three on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button three on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button three on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button three on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button three on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button three on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button three on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button three gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button three gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button three on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button three is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button three is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button three is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
if button three is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
when button three is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once button three pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button three pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button three is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button three is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
if button three is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
when button three is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once button three pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button three pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button three on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button three on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button three is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button three is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
if button three is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
when button three is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once button three pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button three pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button three is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button three is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
if button three is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
when button three is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once button three pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button three pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button three on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button three on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button three on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button three on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button three on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button three on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button three on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button three on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button three on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button three on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button three on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button three on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button three on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button three gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button three gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button three on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button three is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button three is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button three is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
if button three is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
when button three is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once button three pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button three pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button three is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button three is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
if button three is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
when button three is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once button three pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button three pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button three on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button three on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button three is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button three is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
if button three is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
when button three is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once button three pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button three pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button three is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button three is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
if button three is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
when button three is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once button three pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button three pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button three on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button three on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button three on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button three on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button three on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button three on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button three on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button three on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button three on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button three on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button three on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button three on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button three on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button three gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button three gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button three on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button three is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button three is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button three is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
if button three is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
when button three is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once button three pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button three pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button three is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button three is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
if button three is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
when button three is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once button three pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button three pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button three on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button three on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button three is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button three is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
if button three is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
when button three is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once button three pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button three pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button three is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button three is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
if button three is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
when button three is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once button three pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button three pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button three on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button three on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button three on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button three on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button three on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button three on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button three on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button three on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button three on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button three on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button three on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button three on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button three on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button three gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button three gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button three on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button three is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button three is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button three is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
if button three is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
when button three is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once button three pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button three pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button three is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button three is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
if button three is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
when button three is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once button three pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button three pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button three on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button three on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button three on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button three on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button three on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button three on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button three on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button three is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button three is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
if button three is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
when button three is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once button three pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button three pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button three is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button three is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
if button three is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
when button three is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once button three pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button three pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button three on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button three on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button three on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button three on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button three on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button three on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button three on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button three on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button three on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button three on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button three on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button three on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button three on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button three on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button three on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button three on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button three on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button three on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button three gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button three gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button three on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button three on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button three is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
Once the button three on the StreamDeck is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button four is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
when streamdeck button four is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
if button four is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
when button four is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once button four pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once streamdeck button four pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
if streamdeck button four is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
when streamdeck button four is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
if button four is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
when button four is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once button four pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once streamdeck button four pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone push the button four on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button four on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone press the button four on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone click the button four on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
if streamdeck button four is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
when streamdeck button four is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
if button four is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
when button four is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once button four pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once streamdeck button four pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
if streamdeck button four is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
when streamdeck button four is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
if button four is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
when button four is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once button four pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once streamdeck button four pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone push the button four on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone press the button four on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button four on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone hit the button four on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button four on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone click the button four on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button four on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone press the button four on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button four on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone hit the button four on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button four on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone click the button four on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button four on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone press the button four on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone hit the button four on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button four gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button four gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Should someone click the button four on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button four is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
Once the button four on the StreamDeck is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', White)};
if streamdeck button four is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button four is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
if button four is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
when button four is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once button four pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button four pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button four is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button four is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
if button four is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
when button four is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once button four pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button four pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button four on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button four on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button four is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button four is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
if button four is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
when button four is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once button four pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button four pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button four is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button four is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
if button four is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
when button four is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once button four pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button four pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button four on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button four on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button four on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button four on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button four on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button four on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button four on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button four on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button four on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button four on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button four on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button four on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button four on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button four gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button four gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button four on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button four is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button four is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button four is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
if button four is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
when button four is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once button four pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button four pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button four is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button four is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
if button four is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
when button four is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once button four pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button four pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button four on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button four on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button four is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button four is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
if button four is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
when button four is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once button four pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button four pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button four is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button four is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
if button four is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
when button four is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once button four pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button four pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button four on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button four on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button four on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button four on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button four on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button four on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button four on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button four on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button four on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button four on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button four on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button four on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button four on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button four gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button four gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button four on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button four is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button four is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
when streamdeck button four is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
if button four is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
when button four is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once button four pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button four pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
if streamdeck button four is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
when streamdeck button four is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
if button four is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
when button four is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once button four pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button four pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone push the button four on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button four on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
if streamdeck button four is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
when streamdeck button four is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
if button four is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
when button four is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once button four pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button four pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
if streamdeck button four is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
when streamdeck button four is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
if button four is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
when button four is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once button four pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button four pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone push the button four on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone press the button four on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button four on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button four on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button four on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone click the button four on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone press the button four on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button four on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button four on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button four on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone click the button four on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button four on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone press the button four on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button four gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button four gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Should someone click the button four on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button four is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Black)};
if streamdeck button four is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
when streamdeck button four is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
if button four is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
when button four is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once button four pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button four pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
if streamdeck button four is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
when streamdeck button four is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
if button four is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
when button four is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once button four pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button four pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone push the button four on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button four on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
if streamdeck button four is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
when streamdeck button four is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
if button four is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
when button four is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once button four pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button four pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
if streamdeck button four is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
when streamdeck button four is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
if button four is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
when button four is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once button four pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button four pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone push the button four on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone press the button four on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button four on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button four on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button four on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone click the button four on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone press the button four on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button four on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button four on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button four on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone click the button four on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button four on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone press the button four on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button four gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button four gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Should someone click the button four on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button four is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Red)};
if streamdeck button four is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button four is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
if button four is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
when button four is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once button four pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button four pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button four is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button four is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
if button four is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
when button four is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once button four pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button four pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button four on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button four on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button four is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button four is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
if button four is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
when button four is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once button four pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button four pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button four is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button four is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
if button four is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
when button four is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once button four pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button four pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button four on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button four on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button four on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button four on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button four on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button four on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button four on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button four on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button four on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button four on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button four on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button four on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button four on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button four gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button four gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button four on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button four is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button four is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button four is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
if button four is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
when button four is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once button four pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button four pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button four is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button four is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
if button four is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
when button four is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once button four pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button four pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button four on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button four on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button four is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button four is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
if button four is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
when button four is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once button four pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button four pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button four is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button four is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
if button four is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
when button four is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once button four pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button four pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button four on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button four on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button four on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button four on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button four on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button four on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button four on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button four on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button four on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button four on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button four on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button four on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button four on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button four gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button four gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button four on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button four is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button four is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button four is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
if button four is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
when button four is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once button four pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button four pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button four is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button four is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
if button four is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
when button four is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once button four pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button four pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button four on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button four on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button four is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button four is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
if button four is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
when button four is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once button four pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button four pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button four is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button four is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
if button four is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
when button four is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once button four pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button four pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button four on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button four on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button four on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button four on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button four on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button four on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button four on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button four on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button four on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button four on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button four on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button four on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button four on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button four gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button four gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button four on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button four is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button four is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button four is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
if button four is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
when button four is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once button four pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button four pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button four is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button four is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
if button four is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
when button four is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once button four pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button four pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button four on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button four on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button four is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button four is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
if button four is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
when button four is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once button four pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button four pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button four is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button four is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
if button four is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
when button four is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once button four pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button four pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button four on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button four on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button four on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button four on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button four on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button four on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button four on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button four on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button four on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button four on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button four on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button four on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button four on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button four gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button four gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button four on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button four is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button four is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
when streamdeck button four is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
if button four is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
when button four is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once button four pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button four pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
if streamdeck button four is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
when streamdeck button four is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
if button four is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
when button four is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once button four pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button four pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone push the button four on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button four on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
if streamdeck button four is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
when streamdeck button four is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
if button four is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
when button four is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once button four pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button four pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
if streamdeck button four is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
when streamdeck button four is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
if button four is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
when button four is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once button four pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button four pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone push the button four on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone press the button four on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button four on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button four on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button four on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone click the button four on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone press the button four on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button four on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button four on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button four on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone click the button four on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button four on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone press the button four on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button four gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button four gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Should someone click the button four on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button four is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Green)};
if streamdeck button four is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button four is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
if button four is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
when button four is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once button four pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button four pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button four is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button four is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
if button four is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
when button four is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once button four pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button four pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button four on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button four on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button four is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button four is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
if button four is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
when button four is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once button four pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button four pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button four is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button four is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
if button four is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
when button four is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once button four pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button four pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button four on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button four on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button four on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button four on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button four on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button four on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button four on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button four on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button four on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button four on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button four on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button four on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button four on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button four gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button four gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button four on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button four is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button four is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button four is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
if button four is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
when button four is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once button four pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button four pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button four is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button four is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
if button four is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
when button four is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once button four pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button four pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button four on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button four on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button four is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button four is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
if button four is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
when button four is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once button four pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button four pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button four is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button four is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
if button four is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
when button four is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once button four pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button four pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button four on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button four on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button four on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button four on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button four on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button four on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button four on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button four on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button four on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button four on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button four on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button four on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button four on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button four gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button four gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button four on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button four is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button four is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button four is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
if button four is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
when button four is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once button four pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button four pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button four is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button four is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
if button four is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
when button four is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once button four pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button four pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button four on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button four on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button four is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button four is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
if button four is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
when button four is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once button four pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button four pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button four is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button four is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
if button four is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
when button four is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once button four pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button four pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button four on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button four on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button four on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button four on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button four on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button four on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button four on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button four on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button four on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button four on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button four on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button four on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button four on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button four gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button four gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button four on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button four is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button four is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button four is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
if button four is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
when button four is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once button four pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button four pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button four is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button four is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
if button four is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
when button four is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once button four pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button four pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button four on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button four on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button four is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button four is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
if button four is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
when button four is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once button four pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button four pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button four is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button four is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
if button four is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
when button four is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once button four pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button four pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button four on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button four on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button four on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button four on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button four on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button four on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button four on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button four on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button four on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button four on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button four on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button four on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button four on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button four gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button four gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button four on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button four is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button four is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button four is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
if button four is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
when button four is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once button four pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button four pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button four is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button four is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
if button four is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
when button four is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once button four pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button four pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button four on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button four on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button four is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button four is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
if button four is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
when button four is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once button four pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button four pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button four is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button four is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
if button four is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
when button four is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once button four pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button four pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button four on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button four on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button four on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button four on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button four on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button four on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button four on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button four on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button four on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button four on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button four on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button four on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button four on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button four gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button four gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button four on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button four is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button four is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button four is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
if button four is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
when button four is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once button four pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button four pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button four is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button four is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
if button four is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
when button four is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once button four pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button four pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button four on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button four on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button four on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button four on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button four on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button four on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button four on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button four is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button four is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
if button four is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
when button four is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once button four pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button four pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button four is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button four is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
if button four is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
when button four is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once button four pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button four pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button four on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button four on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button four on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button four on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button four on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button four on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button four on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button four on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button four on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button four on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button four on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button four on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button four on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button four on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button four on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button four on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button four on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button four on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button four gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button four gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button four on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button four on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button four is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
Once the button four on the StreamDeck is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button five is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
when streamdeck button five is pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
if button five is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
when button five is pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once button five pressed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once streamdeck button five pressed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
if streamdeck button five is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
when streamdeck button five is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
if button five is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
when button five is pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once button five pushed in streamdeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once streamdeck button five pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone push the button five on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button five on the StreamDeck, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is pushed, change colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone press the button five on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is hit, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone click the button five on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
if streamdeck button five is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
when streamdeck button five is pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
if button five is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
when button five is pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once button five pressed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once streamdeck button five pressed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
if streamdeck button five is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
when streamdeck button five is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
if button five is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
when button five is pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once button five pushed in streamdeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once streamdeck button five pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone push the button five on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is pushed, change philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone press the button five on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button five on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is pressed, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone hit the button five on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button five on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is hit, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone click the button five on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button five on the StreamDeck, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is clicked, turn colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone press the button five on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button five on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is pressed, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone hit the button five on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button five on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is hit, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone click the button five on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button five on the StreamDeck, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is clicked, set colour to White in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone press the button five on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is pressed, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone hit the button five on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is hit, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
If the StreamDeck button five gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
When the StreamDeck button five gets clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Should someone click the button five on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
In case the StreamDeck button five is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
Once the button five on the StreamDeck is clicked, set philips hue colour to White .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', White)};
if streamdeck button five is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button five is pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
if button five is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
when button five is pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once button five pressed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button five pressed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button five is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button five is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
if button five is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
when button five is pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once button five pushed in streamdeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button five pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button five on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button five on the StreamDeck, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is pushed, change colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button five is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button five is pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
if button five is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
when button five is pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once button five pressed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button five pressed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button five is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
when streamdeck button five is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
if button five is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
when button five is pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once button five pushed in streamdeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once streamdeck button five pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone push the button five on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button five on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button five on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is pressed, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button five on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button five on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is hit, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button five on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is clicked, turn colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button five on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button five on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is pressed, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button five on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button five on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is hit, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button five on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button five on the StreamDeck, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is clicked, set colour to Silver in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone press the button five on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is hit, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
If the StreamDeck button five gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
When the StreamDeck button five gets clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Should someone click the button five on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
In case the StreamDeck button five is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Silver .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Silver)};
if streamdeck button five is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button five is pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
if button five is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
when button five is pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once button five pressed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button five pressed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button five is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button five is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
if button five is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
when button five is pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once button five pushed in streamdeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button five pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button five on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button five on the StreamDeck, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is pushed, change colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button five is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button five is pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
if button five is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
when button five is pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once button five pressed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button five pressed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button five is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
when streamdeck button five is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
if button five is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
when button five is pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once button five pushed in streamdeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once streamdeck button five pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone push the button five on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button five on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button five on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is pressed, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button five on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button five on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is hit, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button five on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is clicked, turn colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button five on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button five on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is pressed, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button five on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button five on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is hit, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button five on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button five on the StreamDeck, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is clicked, set colour to Gray in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone press the button five on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is hit, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
If the StreamDeck button five gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
When the StreamDeck button five gets clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Should someone click the button five on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
In case the StreamDeck button five is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Gray .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Gray)};
if streamdeck button five is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
when streamdeck button five is pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
if button five is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
when button five is pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once button five pressed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button five pressed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
if streamdeck button five is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
when streamdeck button five is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
if button five is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
when button five is pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once button five pushed in streamdeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button five pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone push the button five on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button five on the StreamDeck, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is pushed, change colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
if streamdeck button five is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
when streamdeck button five is pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
if button five is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
when button five is pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once button five pressed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button five pressed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
if streamdeck button five is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
when streamdeck button five is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
if button five is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
when button five is pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once button five pushed in streamdeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once streamdeck button five pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone push the button five on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone press the button five on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button five on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is pressed, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button five on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button five on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is hit, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone click the button five on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is clicked, turn colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone press the button five on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button five on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is pressed, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button five on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button five on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is hit, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone click the button five on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button five on the StreamDeck, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is clicked, set colour to Black in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone press the button five on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is hit, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
If the StreamDeck button five gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
When the StreamDeck button five gets clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Should someone click the button five on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
In case the StreamDeck button five is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Black .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Black)};
if streamdeck button five is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
when streamdeck button five is pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
if button five is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
when button five is pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once button five pressed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button five pressed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
if streamdeck button five is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
when streamdeck button five is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
if button five is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
when button five is pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once button five pushed in streamdeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button five pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone push the button five on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button five on the StreamDeck, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is pushed, change colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
if streamdeck button five is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
when streamdeck button five is pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
if button five is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
when button five is pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once button five pressed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button five pressed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
if streamdeck button five is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
when streamdeck button five is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
if button five is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
when button five is pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once button five pushed in streamdeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once streamdeck button five pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone push the button five on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone press the button five on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button five on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is pressed, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button five on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button five on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is hit, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone click the button five on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is clicked, turn colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone press the button five on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button five on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is pressed, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button five on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button five on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is hit, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone click the button five on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button five on the StreamDeck, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is clicked, set colour to Red in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone press the button five on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is hit, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
If the StreamDeck button five gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
When the StreamDeck button five gets clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Should someone click the button five on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
In case the StreamDeck button five is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Red .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Red)};
if streamdeck button five is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button five is pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
if button five is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
when button five is pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once button five pressed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button five pressed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button five is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button five is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
if button five is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
when button five is pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once button five pushed in streamdeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button five pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button five on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button five on the StreamDeck, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is pushed, change colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button five is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button five is pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
if button five is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
when button five is pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once button five pressed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button five pressed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button five is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
when streamdeck button five is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
if button five is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
when button five is pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once button five pushed in streamdeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once streamdeck button five pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone push the button five on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button five on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button five on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is pressed, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button five on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button five on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is hit, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button five on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is clicked, turn colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button five on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button five on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is pressed, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button five on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button five on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is hit, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button five on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button five on the StreamDeck, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is clicked, set colour to Maroon in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone press the button five on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is hit, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
If the StreamDeck button five gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
When the StreamDeck button five gets clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Should someone click the button five on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
In case the StreamDeck button five is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Maroon .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Maroon)};
if streamdeck button five is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button five is pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
if button five is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
when button five is pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once button five pressed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button five pressed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button five is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button five is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
if button five is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
when button five is pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once button five pushed in streamdeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button five pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button five on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button five on the StreamDeck, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is pushed, change colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button five is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button five is pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
if button five is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
when button five is pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once button five pressed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button five pressed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button five is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
when streamdeck button five is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
if button five is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
when button five is pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once button five pushed in streamdeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once streamdeck button five pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone push the button five on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button five on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button five on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is pressed, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button five on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button five on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is hit, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button five on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is clicked, turn colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button five on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button five on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is pressed, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button five on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button five on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is hit, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button five on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button five on the StreamDeck, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is clicked, set colour to Yellow in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone press the button five on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is hit, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
If the StreamDeck button five gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
When the StreamDeck button five gets clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Should someone click the button five on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
In case the StreamDeck button five is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Yellow .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Yellow)};
if streamdeck button five is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button five is pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
if button five is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
when button five is pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once button five pressed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button five pressed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button five is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button five is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
if button five is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
when button five is pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once button five pushed in streamdeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button five pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button five on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button five on the StreamDeck, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is pushed, change colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button five is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button five is pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
if button five is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
when button five is pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once button five pressed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button five pressed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button five is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
when streamdeck button five is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
if button five is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
when button five is pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once button five pushed in streamdeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once streamdeck button five pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone push the button five on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button five on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button five on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is pressed, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button five on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button five on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is hit, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button five on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is clicked, turn colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button five on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button five on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is pressed, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button five on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button five on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is hit, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button five on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button five on the StreamDeck, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is clicked, set colour to Olive in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone press the button five on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is hit, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
If the StreamDeck button five gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
When the StreamDeck button five gets clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Should someone click the button five on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
In case the StreamDeck button five is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Olive .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Olive)};
if streamdeck button five is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button five is pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
if button five is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
when button five is pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once button five pressed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button five pressed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button five is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button five is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
if button five is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
when button five is pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once button five pushed in streamdeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button five pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button five on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button five on the StreamDeck, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is pushed, change colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button five is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button five is pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
if button five is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
when button five is pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once button five pressed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button five pressed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button five is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
when streamdeck button five is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
if button five is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
when button five is pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once button five pushed in streamdeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once streamdeck button five pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone push the button five on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button five on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button five on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is pressed, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button five on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button five on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is hit, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button five on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is clicked, turn colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button five on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button five on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is pressed, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button five on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button five on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is hit, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button five on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button five on the StreamDeck, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is clicked, set colour to Lime in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone press the button five on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is hit, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
If the StreamDeck button five gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
When the StreamDeck button five gets clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Should someone click the button five on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
In case the StreamDeck button five is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Lime .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Lime)};
if streamdeck button five is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
when streamdeck button five is pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
if button five is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
when button five is pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once button five pressed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button five pressed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
if streamdeck button five is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
when streamdeck button five is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
if button five is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
when button five is pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once button five pushed in streamdeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button five pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone push the button five on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button five on the StreamDeck, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is pushed, change colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
if streamdeck button five is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
when streamdeck button five is pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
if button five is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
when button five is pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once button five pressed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button five pressed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
if streamdeck button five is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
when streamdeck button five is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
if button five is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
when button five is pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once button five pushed in streamdeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once streamdeck button five pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone push the button five on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone press the button five on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button five on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is pressed, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button five on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button five on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is hit, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone click the button five on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is clicked, turn colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone press the button five on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button five on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is pressed, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button five on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button five on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is hit, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone click the button five on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button five on the StreamDeck, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is clicked, set colour to Green in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone press the button five on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is hit, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
If the StreamDeck button five gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
When the StreamDeck button five gets clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Should someone click the button five on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
In case the StreamDeck button five is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Green .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Green)};
if streamdeck button five is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button five is pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
if button five is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
when button five is pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once button five pressed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button five pressed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button five is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button five is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
if button five is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
when button five is pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once button five pushed in streamdeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button five pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button five on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button five on the StreamDeck, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is pushed, change colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button five is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button five is pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
if button five is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
when button five is pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once button five pressed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button five pressed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button five is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
when streamdeck button five is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
if button five is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
when button five is pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once button five pushed in streamdeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once streamdeck button five pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone push the button five on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button five on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button five on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is pressed, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button five on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button five on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is hit, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button five on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is clicked, turn colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button five on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button five on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is pressed, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button five on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button five on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is hit, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button five on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button five on the StreamDeck, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is clicked, set colour to Aqua in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone press the button five on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is hit, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
If the StreamDeck button five gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
When the StreamDeck button five gets clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Should someone click the button five on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
In case the StreamDeck button five is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Aqua .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Aqua)};
if streamdeck button five is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button five is pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
if button five is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
when button five is pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once button five pressed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button five pressed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button five is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button five is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
if button five is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
when button five is pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once button five pushed in streamdeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button five pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button five on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button five on the StreamDeck, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is pushed, change colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button five is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button five is pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
if button five is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
when button five is pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once button five pressed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button five pressed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button five is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
when streamdeck button five is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
if button five is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
when button five is pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once button five pushed in streamdeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once streamdeck button five pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone push the button five on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button five on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button five on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is pressed, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button five on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button five on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is hit, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button five on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is clicked, turn colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button five on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button five on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is pressed, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button five on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button five on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is hit, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button five on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button five on the StreamDeck, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is clicked, set colour to Teal in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone press the button five on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is hit, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
If the StreamDeck button five gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
When the StreamDeck button five gets clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Should someone click the button five on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
In case the StreamDeck button five is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Teal .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Teal)};
if streamdeck button five is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button five is pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
if button five is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
when button five is pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once button five pressed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button five pressed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button five is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button five is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
if button five is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
when button five is pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once button five pushed in streamdeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button five pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button five on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button five on the StreamDeck, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is pushed, change colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button five is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button five is pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
if button five is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
when button five is pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once button five pressed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button five pressed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button five is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
when streamdeck button five is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
if button five is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
when button five is pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once button five pushed in streamdeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once streamdeck button five pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone push the button five on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button five on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button five on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is pressed, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button five on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button five on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is hit, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button five on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is clicked, turn colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button five on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button five on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is pressed, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button five on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button five on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is hit, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button five on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button five on the StreamDeck, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is clicked, set colour to Blue in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone press the button five on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is hit, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
If the StreamDeck button five gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
When the StreamDeck button five gets clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Should someone click the button five on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
In case the StreamDeck button five is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Blue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Blue)};
if streamdeck button five is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button five is pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
if button five is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
when button five is pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once button five pressed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button five pressed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button five is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button five is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
if button five is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
when button five is pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once button five pushed in streamdeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button five pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button five on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button five on the StreamDeck, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is pushed, change colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button five is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button five is pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
if button five is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
when button five is pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once button five pressed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button five pressed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button five is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
when streamdeck button five is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
if button five is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
when button five is pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once button five pushed in streamdeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once streamdeck button five pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone push the button five on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button five on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button five on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is pressed, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button five on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button five on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is hit, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button five on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is clicked, turn colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button five on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button five on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is pressed, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button five on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button five on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is hit, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button five on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button five on the StreamDeck, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is clicked, set colour to Navy in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone press the button five on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is hit, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
If the StreamDeck button five gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
When the StreamDeck button five gets clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Should someone click the button five on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
In case the StreamDeck button five is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Navy .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Navy)};
if streamdeck button five is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button five is pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
if button five is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
when button five is pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once button five pressed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button five pressed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button five is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button five is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
if button five is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
when button five is pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once button five pushed in streamdeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button five pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button five on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button five on the StreamDeck, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is pushed, change colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button five is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button five is pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
if button five is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
when button five is pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once button five pressed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button five pressed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button five is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
when streamdeck button five is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
if button five is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
when button five is pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once button five pushed in streamdeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once streamdeck button five pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone push the button five on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button five on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button five on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is pressed, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button five on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button five on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is hit, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button five on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is clicked, turn colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button five on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button five on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is pressed, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button five on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button five on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is hit, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button five on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button five on the StreamDeck, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is clicked, set colour to Fuchsia in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone press the button five on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is hit, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
If the StreamDeck button five gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
When the StreamDeck button five gets clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Should someone click the button five on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
In case the StreamDeck button five is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Fuchsia .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Fuchsia)};
if streamdeck button five is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button five is pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
if button five is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
when button five is pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once button five pressed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button five pressed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button five is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button five is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
if button five is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
when button five is pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once button five pushed in streamdeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button five pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button five on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button five on the StreamDeck, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is pushed, change colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button five on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button five on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is pressed, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button five on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button five on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is hit, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button five on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is clicked, turn philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button five is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button five is pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
if button five is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
when button five is pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once button five pressed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button five pressed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button five is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
when streamdeck button five is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
if button five is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
when button five is pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once button five pushed in streamdeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once streamdeck button five pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone push the button five on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone pushes the button five on the StreamDeck, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is pushed, change philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button five on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button five on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is pressed, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button five on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button five on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is hit, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button five on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button five on the StreamDeck, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is clicked, turn colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button five on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button five on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is pressed, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button five on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button five on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is hit, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button five on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button five on the StreamDeck, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is clicked, set colour to Purple in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone press the button five on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone presses the button five on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is pressed, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone hit the button five on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone hits the button five on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is hit, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
If the StreamDeck button five gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
When the StreamDeck button five gets clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Should someone click the button five on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Whenever someone clicks the button five on the StreamDeck, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
In case the StreamDeck button five is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
Once the button five on the StreamDeck is clicked, set philips hue colour to Purple .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('colour', Purple)};
if streamdeck button zero is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when streamdeck button zero is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if button zero is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when button zero is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once button zero pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once streamdeck button zero pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if streamdeck button zero is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when streamdeck button zero is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if button zero is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when button zero is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once button zero pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once streamdeck button zero pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone push the button zero on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button zero on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone press the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone hit the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone click the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if streamdeck button zero is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when streamdeck button zero is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if button zero is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when button zero is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once button zero pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once streamdeck button zero pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if streamdeck button zero is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when streamdeck button zero is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if button zero is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when button zero is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once button zero pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once streamdeck button zero pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone push the button zero on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button zero on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone press the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone hit the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone click the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button zero on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone press the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone hit the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone click the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone press the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone hit the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone click the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button zero on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if streamdeck button zero is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when streamdeck button zero is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if button zero is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when button zero is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once button zero pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once streamdeck button zero pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if streamdeck button zero is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when streamdeck button zero is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if button zero is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when button zero is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once button zero pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once streamdeck button zero pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone push the button zero on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button zero on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if streamdeck button zero is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when streamdeck button zero is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if button zero is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when button zero is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once button zero pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once streamdeck button zero pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if streamdeck button zero is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when streamdeck button zero is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if button zero is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when button zero is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once button zero pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once streamdeck button zero pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone push the button zero on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button zero on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if streamdeck button zero is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when streamdeck button zero is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if button zero is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when button zero is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once button zero pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once streamdeck button zero pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if streamdeck button zero is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when streamdeck button zero is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if button zero is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when button zero is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once button zero pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once streamdeck button zero pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone push the button zero on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button zero on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone press the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone hit the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone click the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if streamdeck button zero is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when streamdeck button zero is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if button zero is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when button zero is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once button zero pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once streamdeck button zero pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if streamdeck button zero is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when streamdeck button zero is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if button zero is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when button zero is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once button zero pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once streamdeck button zero pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone push the button zero on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button zero on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone press the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone hit the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone click the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button zero on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone press the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone hit the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone click the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone press the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone hit the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone click the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button zero on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if streamdeck button zero is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when streamdeck button zero is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if button zero is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when button zero is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once button zero pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once streamdeck button zero pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if streamdeck button zero is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when streamdeck button zero is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if button zero is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
when button zero is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once button zero pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once streamdeck button zero pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
If the StreamDeck button zero gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
When the StreamDeck button zero gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Should someone push the button zero on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button zero on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button zero is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
Once the button zero on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', on)};
if streamdeck button zero is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when streamdeck button zero is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if button zero is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when button zero is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once button zero pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once streamdeck button zero pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if streamdeck button zero is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when streamdeck button zero is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if button zero is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
when button zero is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once button zero pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once streamdeck button zero pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
If the StreamDeck button zero gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
When the StreamDeck button zero gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Should someone push the button zero on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button zero on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button zero is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
Once the button zero on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('power', off)};
if streamdeck button one is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when streamdeck button one is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if button one is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when button one is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once button one pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once streamdeck button one pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if streamdeck button one is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when streamdeck button one is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if button one is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when button one is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once button one pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once streamdeck button one pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone push the button one on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button one on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone press the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone hit the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone click the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if streamdeck button one is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when streamdeck button one is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if button one is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when button one is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once button one pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once streamdeck button one pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if streamdeck button one is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when streamdeck button one is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if button one is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when button one is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once button one pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once streamdeck button one pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone push the button one on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button one on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone press the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone hit the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone click the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button one on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone press the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone hit the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone click the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone press the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone hit the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone click the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button one on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if streamdeck button one is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when streamdeck button one is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if button one is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when button one is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once button one pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once streamdeck button one pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if streamdeck button one is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when streamdeck button one is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if button one is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when button one is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once button one pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once streamdeck button one pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone push the button one on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button one on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if streamdeck button one is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when streamdeck button one is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if button one is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when button one is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once button one pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once streamdeck button one pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if streamdeck button one is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when streamdeck button one is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if button one is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when button one is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once button one pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once streamdeck button one pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone push the button one on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button one on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if streamdeck button one is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when streamdeck button one is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if button one is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when button one is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once button one pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once streamdeck button one pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if streamdeck button one is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when streamdeck button one is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if button one is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when button one is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once button one pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once streamdeck button one pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone push the button one on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button one on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone press the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone hit the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone click the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if streamdeck button one is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when streamdeck button one is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if button one is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when button one is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once button one pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once streamdeck button one pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if streamdeck button one is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when streamdeck button one is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if button one is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when button one is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once button one pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once streamdeck button one pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone push the button one on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button one on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone press the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone hit the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone click the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button one on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone press the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone hit the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone click the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone press the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone hit the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone click the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button one on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if streamdeck button one is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when streamdeck button one is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if button one is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when button one is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once button one pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once streamdeck button one pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if streamdeck button one is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when streamdeck button one is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if button one is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
when button one is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once button one pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once streamdeck button one pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
If the StreamDeck button one gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
When the StreamDeck button one gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Should someone push the button one on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button one on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button one is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
Once the button one on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', on)};
if streamdeck button one is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when streamdeck button one is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if button one is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when button one is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once button one pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once streamdeck button one pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if streamdeck button one is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when streamdeck button one is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if button one is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
when button one is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once button one pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once streamdeck button one pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
If the StreamDeck button one gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
When the StreamDeck button one gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Should someone push the button one on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button one on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button one is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
Once the button one on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('power', off)};
if streamdeck button two is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when streamdeck button two is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if button two is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when button two is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once button two pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once streamdeck button two pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if streamdeck button two is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when streamdeck button two is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if button two is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when button two is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once button two pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once streamdeck button two pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone push the button two on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button two on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone press the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone hit the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone click the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if streamdeck button two is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when streamdeck button two is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if button two is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when button two is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once button two pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once streamdeck button two pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if streamdeck button two is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when streamdeck button two is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if button two is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when button two is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once button two pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once streamdeck button two pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone push the button two on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button two on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone press the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone hit the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone click the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button two on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone press the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone hit the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone click the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone press the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone hit the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone click the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button two on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if streamdeck button two is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when streamdeck button two is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if button two is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when button two is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once button two pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once streamdeck button two pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if streamdeck button two is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when streamdeck button two is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if button two is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when button two is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once button two pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once streamdeck button two pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone push the button two on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button two on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if streamdeck button two is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when streamdeck button two is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if button two is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when button two is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once button two pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once streamdeck button two pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if streamdeck button two is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when streamdeck button two is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if button two is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when button two is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once button two pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once streamdeck button two pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone push the button two on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button two on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if streamdeck button two is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when streamdeck button two is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if button two is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when button two is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once button two pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once streamdeck button two pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if streamdeck button two is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when streamdeck button two is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if button two is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when button two is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once button two pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once streamdeck button two pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone push the button two on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button two on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone press the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone hit the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone click the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if streamdeck button two is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when streamdeck button two is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if button two is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when button two is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once button two pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once streamdeck button two pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if streamdeck button two is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when streamdeck button two is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if button two is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when button two is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once button two pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once streamdeck button two pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone push the button two on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button two on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone press the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone hit the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone click the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button two on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone press the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone hit the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone click the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone press the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone hit the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone click the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button two on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if streamdeck button two is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when streamdeck button two is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if button two is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when button two is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once button two pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once streamdeck button two pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if streamdeck button two is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when streamdeck button two is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if button two is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
when button two is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once button two pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once streamdeck button two pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
If the StreamDeck button two gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
When the StreamDeck button two gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Should someone push the button two on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button two on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button two is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
Once the button two on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', on)};
if streamdeck button two is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when streamdeck button two is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if button two is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when button two is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once button two pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once streamdeck button two pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if streamdeck button two is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when streamdeck button two is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if button two is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
when button two is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once button two pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once streamdeck button two pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
If the StreamDeck button two gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
When the StreamDeck button two gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Should someone push the button two on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button two on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button two is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
Once the button two on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('power', off)};
if streamdeck button three is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when streamdeck button three is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if button three is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when button three is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once button three pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once streamdeck button three pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if streamdeck button three is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when streamdeck button three is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if button three is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when button three is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once button three pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once streamdeck button three pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone push the button three on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button three on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone press the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone hit the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone click the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if streamdeck button three is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when streamdeck button three is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if button three is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when button three is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once button three pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once streamdeck button three pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if streamdeck button three is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when streamdeck button three is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if button three is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when button three is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once button three pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once streamdeck button three pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone push the button three on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button three on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone press the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone hit the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone click the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button three on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone press the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone hit the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone click the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone press the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone hit the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone click the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button three on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if streamdeck button three is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when streamdeck button three is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if button three is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when button three is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once button three pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once streamdeck button three pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if streamdeck button three is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when streamdeck button three is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if button three is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when button three is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once button three pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once streamdeck button three pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone push the button three on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button three on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if streamdeck button three is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when streamdeck button three is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if button three is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when button three is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once button three pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once streamdeck button three pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if streamdeck button three is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when streamdeck button three is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if button three is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when button three is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once button three pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once streamdeck button three pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone push the button three on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button three on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if streamdeck button three is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when streamdeck button three is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if button three is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when button three is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once button three pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once streamdeck button three pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if streamdeck button three is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when streamdeck button three is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if button three is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when button three is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once button three pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once streamdeck button three pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone push the button three on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button three on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone press the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone hit the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone click the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if streamdeck button three is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when streamdeck button three is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if button three is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when button three is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once button three pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once streamdeck button three pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if streamdeck button three is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when streamdeck button three is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if button three is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when button three is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once button three pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once streamdeck button three pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone push the button three on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button three on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone press the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone hit the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone click the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button three on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone press the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone hit the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone click the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone press the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone hit the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone click the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button three on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if streamdeck button three is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when streamdeck button three is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if button three is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when button three is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once button three pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once streamdeck button three pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if streamdeck button three is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when streamdeck button three is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if button three is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
when button three is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once button three pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once streamdeck button three pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
If the StreamDeck button three gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
When the StreamDeck button three gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Should someone push the button three on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button three on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button three is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
Once the button three on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', on)};
if streamdeck button three is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when streamdeck button three is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if button three is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when button three is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once button three pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once streamdeck button three pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if streamdeck button three is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when streamdeck button three is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if button three is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
when button three is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once button three pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once streamdeck button three pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
If the StreamDeck button three gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
When the StreamDeck button three gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Should someone push the button three on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button three on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button three is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
Once the button three on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('power', off)};
if streamdeck button four is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when streamdeck button four is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if button four is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when button four is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once button four pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once streamdeck button four pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if streamdeck button four is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when streamdeck button four is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if button four is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when button four is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once button four pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once streamdeck button four pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone push the button four on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button four on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone press the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone hit the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone click the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if streamdeck button four is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when streamdeck button four is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if button four is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when button four is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once button four pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once streamdeck button four pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if streamdeck button four is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when streamdeck button four is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if button four is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when button four is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once button four pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once streamdeck button four pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone push the button four on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button four on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone press the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone hit the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone click the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button four on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone press the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone hit the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone click the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone press the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone hit the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone click the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button four on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if streamdeck button four is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when streamdeck button four is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if button four is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when button four is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once button four pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once streamdeck button four pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if streamdeck button four is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when streamdeck button four is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if button four is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when button four is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once button four pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once streamdeck button four pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone push the button four on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button four on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if streamdeck button four is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when streamdeck button four is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if button four is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when button four is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once button four pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once streamdeck button four pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if streamdeck button four is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when streamdeck button four is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if button four is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when button four is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once button four pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once streamdeck button four pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone push the button four on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button four on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if streamdeck button four is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when streamdeck button four is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if button four is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when button four is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once button four pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once streamdeck button four pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if streamdeck button four is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when streamdeck button four is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if button four is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when button four is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once button four pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once streamdeck button four pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone push the button four on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button four on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone press the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone hit the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone click the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if streamdeck button four is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when streamdeck button four is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if button four is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when button four is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once button four pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once streamdeck button four pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if streamdeck button four is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when streamdeck button four is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if button four is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when button four is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once button four pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once streamdeck button four pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone push the button four on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button four on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone press the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone hit the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone click the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button four on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone press the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone hit the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone click the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone press the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone hit the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone click the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button four on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if streamdeck button four is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when streamdeck button four is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if button four is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when button four is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once button four pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once streamdeck button four pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if streamdeck button four is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when streamdeck button four is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if button four is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
when button four is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once button four pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once streamdeck button four pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
If the StreamDeck button four gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
When the StreamDeck button four gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Should someone push the button four on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button four on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button four is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
Once the button four on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', on)};
if streamdeck button four is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when streamdeck button four is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if button four is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when button four is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once button four pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once streamdeck button four pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if streamdeck button four is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when streamdeck button four is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if button four is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
when button four is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once button four pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once streamdeck button four pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
If the StreamDeck button four gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
When the StreamDeck button four gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Should someone push the button four on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button four on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button four is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
Once the button four on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('power', off)};
if streamdeck button five is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when streamdeck button five is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if button five is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when button five is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once button five pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once streamdeck button five pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if streamdeck button five is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when streamdeck button five is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if button five is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when button five is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once button five pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once streamdeck button five pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone push the button five on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button five on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone press the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone hit the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone click the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if streamdeck button five is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when streamdeck button five is pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if button five is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when button five is pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once button five pressed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once streamdeck button five pressed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if streamdeck button five is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when streamdeck button five is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if button five is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when button five is pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once button five pushed in streamdeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once streamdeck button five pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone push the button five on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button five on the StreamDeck, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is pushed, switch on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone press the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is pressed, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone hit the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is hit, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone click the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button five on the StreamDeck, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is clicked, turn on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone press the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone hit the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone click the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone press the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone presses the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is pressed, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone hit the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone hits the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is hit, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone click the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone clicks the button five on the StreamDeck, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is clicked, set power on philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if streamdeck button five is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when streamdeck button five is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if button five is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when button five is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once button five pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once streamdeck button five pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if streamdeck button five is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when streamdeck button five is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if button five is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when button five is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once button five pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once streamdeck button five pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone push the button five on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button five on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if streamdeck button five is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when streamdeck button five is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if button five is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when button five is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once button five pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once streamdeck button five pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if streamdeck button five is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when streamdeck button five is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if button five is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when button five is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once button five pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once streamdeck button five pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone push the button five on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button five on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if streamdeck button five is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when streamdeck button five is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if button five is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when button five is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once button five pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once streamdeck button five pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if streamdeck button five is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when streamdeck button five is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if button five is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when button five is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once button five pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once streamdeck button five pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone push the button five on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button five on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone press the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone hit the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone click the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if streamdeck button five is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when streamdeck button five is pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if button five is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when button five is pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once button five pressed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once streamdeck button five pressed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if streamdeck button five is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when streamdeck button five is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if button five is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when button five is pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once button five pushed in streamdeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once streamdeck button five pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone push the button five on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button five on the StreamDeck, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is pushed, switch off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone press the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is pressed, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone hit the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is hit, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone click the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button five on the StreamDeck, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is clicked, turn off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone press the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone hit the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone click the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone press the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone presses the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is pressed, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone hit the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone hits the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is hit, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone click the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone clicks the button five on the StreamDeck, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is clicked, set power off philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if streamdeck button five is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when streamdeck button five is pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if button five is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when button five is pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once button five pressed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once streamdeck button five pressed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if streamdeck button five is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when streamdeck button five is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if button five is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
when button five is pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once button five pushed in streamdeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once streamdeck button five pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
If the StreamDeck button five gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
When the StreamDeck button five gets pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Should someone push the button five on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Whenever someone pushes the button five on the StreamDeck, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
In case the StreamDeck button five is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
Once the button five on the StreamDeck is pushed, activate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', on)};
if streamdeck button five is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when streamdeck button five is pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if button five is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when button five is pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once button five pressed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once streamdeck button five pressed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if streamdeck button five is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when streamdeck button five is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if button five is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
when button five is pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once button five pushed in streamdeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once streamdeck button five pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
If the StreamDeck button five gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
When the StreamDeck button five gets pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Should someone push the button five on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Whenever someone pushes the button five on the StreamDeck, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
In case the StreamDeck button five is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
Once the button five on the StreamDeck is pushed, deactivate philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('power', off)};
if streamdeck button zero is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button zero is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
if button zero is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
when button zero is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once button zero pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button zero pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button zero is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button zero is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
if button zero is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
when button zero is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once button zero pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button zero pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button zero on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button zero is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button zero is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
if button zero is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
when button zero is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once button zero pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button zero pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button zero is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button zero is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
if button zero is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
when button zero is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once button zero pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button zero pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button zero on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button zero on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button zero on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button zero on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button zero on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button zero on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button zero on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button zero on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button zero gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button zero gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button zero is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button zero is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button zero is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
if button zero is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
when button zero is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once button zero pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button zero pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button zero is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button zero is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
if button zero is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
when button zero is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once button zero pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button zero pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button zero on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button zero is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button zero is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
if button zero is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
when button zero is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once button zero pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button zero pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button zero is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button zero is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
if button zero is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
when button zero is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once button zero pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button zero pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button zero on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button zero on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button zero on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button zero on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button zero on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button zero on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button zero on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button zero on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button zero gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button zero gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button zero is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button zero is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button zero is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
if button zero is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
when button zero is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once button zero pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button zero pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button zero is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button zero is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
if button zero is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
when button zero is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once button zero pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button zero pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button zero on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button zero is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button zero is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
if button zero is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
when button zero is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once button zero pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button zero pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button zero is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button zero is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
if button zero is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
when button zero is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once button zero pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button zero pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button zero on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button zero on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button zero on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button zero on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button zero on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button zero on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button zero on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button zero on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button zero gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button zero gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button zero is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button zero is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button zero is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
if button zero is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
when button zero is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once button zero pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button zero pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button zero is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button zero is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
if button zero is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
when button zero is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once button zero pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button zero pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button zero on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button zero is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button zero is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
if button zero is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
when button zero is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once button zero pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button zero pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button zero is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button zero is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
if button zero is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
when button zero is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once button zero pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button zero pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button zero on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button zero on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button zero on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button zero on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button zero on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button zero on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button zero on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button zero on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button zero gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button zero gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button zero is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button zero is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button zero is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
if button zero is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
when button zero is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once button zero pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button zero pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button zero is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button zero is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
if button zero is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
when button zero is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once button zero pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button zero pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button zero on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button zero is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button zero is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
if button zero is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
when button zero is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once button zero pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button zero pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button zero is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button zero is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
if button zero is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
when button zero is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once button zero pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button zero pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button zero on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button zero on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button zero on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button zero on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button zero on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button zero on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button zero on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button zero on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button zero gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button zero gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button zero is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button zero is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button zero is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
if button zero is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
when button zero is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once button zero pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button zero pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button zero is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button zero is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
if button zero is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
when button zero is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once button zero pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button zero pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button zero on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button zero is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button zero is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
if button zero is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
when button zero is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once button zero pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button zero pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button zero is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button zero is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
if button zero is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
when button zero is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once button zero pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button zero pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button zero on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button zero on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button zero on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button zero on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button zero on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button zero on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button zero on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button zero on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button zero gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button zero gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button zero is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button zero is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button zero is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
if button zero is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
when button zero is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once button zero pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button zero pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button zero is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button zero is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
if button zero is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
when button zero is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once button zero pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button zero pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button zero on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button zero is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button zero is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
if button zero is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
when button zero is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once button zero pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button zero pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button zero is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button zero is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
if button zero is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
when button zero is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once button zero pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button zero pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button zero on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button zero on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button zero on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button zero on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button zero on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button zero on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button zero on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button zero on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button zero gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button zero gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button zero is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button zero is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
when streamdeck button zero is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
if button zero is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
when button zero is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once button zero pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button zero pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
if streamdeck button zero is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
when streamdeck button zero is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
if button zero is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
when button zero is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once button zero pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button zero pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone push the button zero on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
if streamdeck button zero is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
when streamdeck button zero is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
if button zero is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
when button zero is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once button zero pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button zero pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
if streamdeck button zero is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
when streamdeck button zero is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
if button zero is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
when button zero is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once button zero pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button zero pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone press the button zero on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button zero on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone click the button zero on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone press the button zero on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button zero on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button zero on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button zero on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone click the button zero on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button zero gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button zero gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button zero is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', half)};
if streamdeck button zero is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button zero is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
if button zero is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
when button zero is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once button zero pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button zero pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button zero is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button zero is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
if button zero is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
when button zero is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once button zero pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button zero pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button zero on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button zero is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button zero is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
if button zero is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
when button zero is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once button zero pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button zero pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button zero is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button zero is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
if button zero is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
when button zero is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once button zero pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button zero pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button zero on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button zero on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button zero on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button zero on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button zero on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button zero on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button zero on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button zero on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button zero gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button zero gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button zero is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button zero is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button zero is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
if button zero is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
when button zero is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once button zero pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button zero pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button zero is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button zero is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
if button zero is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
when button zero is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once button zero pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button zero pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button zero on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button zero is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button zero is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
if button zero is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
when button zero is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once button zero pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button zero pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button zero is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button zero is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
if button zero is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
when button zero is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once button zero pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button zero pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button zero on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button zero on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button zero on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button zero on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button zero on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button zero on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button zero on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button zero on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button zero gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button zero gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button zero is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button zero is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button zero is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
if button zero is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
when button zero is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once button zero pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button zero pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button zero is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button zero is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
if button zero is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
when button zero is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once button zero pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button zero pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button zero on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button zero is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button zero is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
if button zero is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
when button zero is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once button zero pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button zero pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button zero is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button zero is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
if button zero is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
when button zero is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once button zero pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button zero pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button zero on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button zero on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button zero on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button zero on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button zero on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button zero on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button zero on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button zero on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button zero gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button zero gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button zero is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button zero is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button zero is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
if button zero is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
when button zero is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once button zero pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button zero pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button zero is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button zero is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
if button zero is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
when button zero is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once button zero pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button zero pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button zero on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button zero is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button zero is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
if button zero is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
when button zero is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once button zero pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button zero pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button zero is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button zero is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
if button zero is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
when button zero is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once button zero pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button zero pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button zero on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button zero on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button zero on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button zero on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button zero on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button zero on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button zero on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button zero on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button zero gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button zero gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button zero is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button zero is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button zero is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
if button zero is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
when button zero is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once button zero pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button zero pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button zero is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button zero is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
if button zero is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
when button zero is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once button zero pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button zero pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button zero on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button zero is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button zero is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
if button zero is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
when button zero is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once button zero pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button zero pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button zero is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button zero is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
if button zero is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
when button zero is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once button zero pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button zero pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button zero on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button zero on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button zero on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button zero on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button zero on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button zero on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button zero on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button zero on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button zero gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button zero gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button zero is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button zero is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button zero is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
if button zero is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
when button zero is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once button zero pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button zero pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button zero is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button zero is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
if button zero is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
when button zero is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once button zero pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button zero pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button zero on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button zero is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button zero is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
if button zero is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
when button zero is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once button zero pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button zero pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button zero is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button zero is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
if button zero is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
when button zero is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once button zero pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button zero pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button zero on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button zero on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button zero on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button zero on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button zero on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button zero on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button zero on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button zero on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button zero gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button zero gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button zero is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button zero is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
when streamdeck button zero is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
if button zero is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
when button zero is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once button zero pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button zero pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
if streamdeck button zero is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
when streamdeck button zero is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
if button zero is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
when button zero is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once button zero pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button zero pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone push the button zero on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button zero on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone press the button zero on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button zero on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button zero on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button zero on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone click the button zero on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button zero on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
if streamdeck button zero is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
when streamdeck button zero is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
if button zero is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
when button zero is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once button zero pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button zero pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
if streamdeck button zero is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
when streamdeck button zero is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
if button zero is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
when button zero is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once button zero pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button zero pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone push the button zero on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button zero on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone press the button zero on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button zero on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button zero on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button zero on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone click the button zero on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button zero on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone press the button zero on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button zero on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button zero on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button zero on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone click the button zero on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button zero on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone press the button zero on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button zero on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button zero on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button zero on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button zero gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button zero gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Should someone click the button zero on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button zero on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button zero is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
Once the button zero on the StreamDeck is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 0) => {philipshue.writeProperty('brightness', full)};
if streamdeck button one is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button one is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
if button one is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
when button one is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once button one pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button one pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button one is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button one is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
if button one is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
when button one is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once button one pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button one pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button one on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button one on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button one is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button one is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
if button one is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
when button one is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once button one pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button one pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button one is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button one is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
if button one is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
when button one is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once button one pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button one pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button one on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button one on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button one on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button one on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button one on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button one on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button one on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button one on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button one on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button one on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button one on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button one on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button one on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button one gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button one gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button one on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button one is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button one is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button one is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
if button one is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
when button one is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once button one pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button one pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button one is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button one is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
if button one is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
when button one is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once button one pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button one pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button one on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button one on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button one is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button one is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
if button one is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
when button one is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once button one pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button one pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button one is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button one is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
if button one is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
when button one is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once button one pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button one pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button one on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button one on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button one on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button one on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button one on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button one on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button one on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button one on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button one on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button one on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button one on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button one on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button one on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button one gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button one gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button one on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button one is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button one is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button one is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
if button one is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
when button one is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once button one pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button one pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button one is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button one is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
if button one is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
when button one is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once button one pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button one pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button one on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button one on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button one is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button one is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
if button one is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
when button one is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once button one pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button one pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button one is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button one is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
if button one is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
when button one is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once button one pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button one pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button one on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button one on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button one on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button one on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button one on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button one on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button one on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button one on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button one on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button one on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button one on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button one on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button one on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button one gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button one gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button one on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button one is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button one is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button one is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
if button one is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
when button one is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once button one pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button one pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button one is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button one is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
if button one is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
when button one is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once button one pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button one pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button one on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button one on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button one is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button one is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
if button one is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
when button one is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once button one pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button one pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button one is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button one is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
if button one is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
when button one is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once button one pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button one pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button one on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button one on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button one on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button one on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button one on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button one on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button one on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button one on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button one on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button one on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button one on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button one on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button one on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button one gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button one gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button one on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button one is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button one is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button one is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
if button one is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
when button one is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once button one pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button one pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button one is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button one is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
if button one is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
when button one is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once button one pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button one pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button one on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button one on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button one is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button one is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
if button one is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
when button one is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once button one pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button one pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button one is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button one is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
if button one is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
when button one is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once button one pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button one pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button one on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button one on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button one on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button one on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button one on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button one on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button one on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button one on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button one on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button one on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button one on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button one on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button one on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button one gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button one gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button one on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button one is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button one is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button one is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
if button one is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
when button one is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once button one pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button one pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button one is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button one is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
if button one is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
when button one is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once button one pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button one pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button one on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button one on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button one is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button one is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
if button one is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
when button one is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once button one pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button one pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button one is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button one is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
if button one is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
when button one is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once button one pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button one pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button one on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button one on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button one on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button one on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button one on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button one on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button one on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button one on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button one on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button one on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button one on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button one on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button one on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button one gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button one gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button one on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button one is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button one is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button one is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
if button one is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
when button one is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once button one pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button one pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button one is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button one is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
if button one is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
when button one is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once button one pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button one pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button one on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button one on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button one is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button one is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
if button one is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
when button one is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once button one pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button one pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button one is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button one is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
if button one is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
when button one is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once button one pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button one pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button one on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button one on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button one on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button one on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button one on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button one on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button one on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button one on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button one on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button one on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button one on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button one on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button one on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button one gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button one gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button one on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button one is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button one is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
when streamdeck button one is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
if button one is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
when button one is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once button one pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button one pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
if streamdeck button one is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
when streamdeck button one is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
if button one is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
when button one is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once button one pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button one pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone push the button one on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button one on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
if streamdeck button one is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
when streamdeck button one is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
if button one is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
when button one is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once button one pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button one pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
if streamdeck button one is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
when streamdeck button one is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
if button one is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
when button one is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once button one pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button one pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone push the button one on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone press the button one on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button one on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button one on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button one on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone click the button one on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone press the button one on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button one on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button one on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button one on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone click the button one on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button one on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone press the button one on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button one gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button one gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Should someone click the button one on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button one is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', half)};
if streamdeck button one is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button one is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
if button one is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
when button one is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once button one pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button one pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button one is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button one is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
if button one is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
when button one is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once button one pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button one pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button one on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button one on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button one is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button one is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
if button one is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
when button one is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once button one pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button one pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button one is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button one is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
if button one is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
when button one is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once button one pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button one pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button one on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button one on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button one on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button one on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button one on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button one on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button one on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button one on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button one on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button one on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button one on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button one on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button one on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button one gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button one gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button one on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button one is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button one is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button one is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
if button one is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
when button one is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once button one pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button one pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button one is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button one is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
if button one is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
when button one is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once button one pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button one pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button one on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button one on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button one is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button one is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
if button one is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
when button one is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once button one pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button one pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button one is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button one is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
if button one is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
when button one is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once button one pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button one pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button one on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button one on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button one on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button one on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button one on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button one on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button one on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button one on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button one on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button one on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button one on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button one on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button one on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button one gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button one gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button one on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button one is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button one is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button one is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
if button one is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
when button one is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once button one pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button one pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button one is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button one is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
if button one is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
when button one is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once button one pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button one pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button one on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button one on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button one is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button one is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
if button one is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
when button one is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once button one pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button one pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button one is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button one is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
if button one is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
when button one is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once button one pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button one pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button one on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button one on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button one on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button one on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button one on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button one on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button one on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button one on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button one on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button one on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button one on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button one on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button one on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button one gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button one gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button one on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button one is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button one is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button one is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
if button one is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
when button one is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once button one pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button one pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button one is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button one is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
if button one is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
when button one is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once button one pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button one pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button one on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button one on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button one is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button one is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
if button one is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
when button one is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once button one pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button one pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button one is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button one is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
if button one is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
when button one is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once button one pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button one pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button one on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button one on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button one on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button one on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button one on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button one on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button one on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button one on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button one on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button one on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button one on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button one on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button one on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button one gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button one gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button one on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button one is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button one is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button one is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
if button one is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
when button one is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once button one pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button one pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button one is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button one is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
if button one is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
when button one is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once button one pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button one pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button one on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button one on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button one is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button one is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
if button one is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
when button one is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once button one pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button one pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button one is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button one is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
if button one is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
when button one is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once button one pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button one pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button one on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button one on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button one on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button one on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button one on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button one on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button one on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button one on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button one on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button one on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button one on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button one on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button one on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button one gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button one gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button one on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button one is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button one is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button one is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
if button one is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
when button one is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once button one pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button one pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button one is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button one is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
if button one is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
when button one is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once button one pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button one pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button one on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button one on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button one is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button one is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
if button one is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
when button one is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once button one pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button one pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button one is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button one is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
if button one is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
when button one is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once button one pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button one pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button one on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button one on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button one on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button one on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button one on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button one on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button one on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button one on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button one on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button one on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button one on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button one on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button one on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button one gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button one gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button one on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button one is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button one is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
when streamdeck button one is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
if button one is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
when button one is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once button one pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button one pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
if streamdeck button one is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
when streamdeck button one is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
if button one is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
when button one is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once button one pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button one pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone push the button one on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button one on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone press the button one on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button one on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button one on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button one on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone click the button one on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button one on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
if streamdeck button one is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
when streamdeck button one is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
if button one is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
when button one is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once button one pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button one pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
if streamdeck button one is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
when streamdeck button one is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
if button one is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
when button one is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once button one pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button one pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone push the button one on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button one on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone press the button one on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button one on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button one on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button one on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone click the button one on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button one on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone press the button one on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button one on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button one on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button one on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone click the button one on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button one on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone press the button one on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button one on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button one on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button one on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button one gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button one gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Should someone click the button one on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button one on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button one is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
Once the button one on the StreamDeck is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 1) => {philipshue.writeProperty('brightness', full)};
if streamdeck button two is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button two is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
if button two is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
when button two is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once button two pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button two pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button two is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button two is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
if button two is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
when button two is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once button two pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button two pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button two on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button two on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button two is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button two is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
if button two is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
when button two is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once button two pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button two pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button two is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button two is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
if button two is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
when button two is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once button two pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button two pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button two on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button two on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button two on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button two on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button two on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button two on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button two on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button two on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button two on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button two on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button two on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button two on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button two on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button two gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button two gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button two on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button two is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button two is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button two is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
if button two is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
when button two is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once button two pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button two pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button two is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button two is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
if button two is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
when button two is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once button two pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button two pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button two on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button two on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button two is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button two is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
if button two is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
when button two is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once button two pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button two pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button two is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button two is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
if button two is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
when button two is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once button two pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button two pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button two on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button two on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button two on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button two on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button two on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button two on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button two on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button two on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button two on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button two on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button two on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button two on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button two on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button two gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button two gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button two on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button two is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button two is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button two is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
if button two is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
when button two is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once button two pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button two pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button two is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button two is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
if button two is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
when button two is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once button two pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button two pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button two on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button two on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button two is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button two is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
if button two is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
when button two is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once button two pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button two pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button two is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button two is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
if button two is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
when button two is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once button two pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button two pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button two on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button two on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button two on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button two on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button two on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button two on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button two on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button two on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button two on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button two on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button two on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button two on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button two on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button two gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button two gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button two on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button two is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button two is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button two is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
if button two is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
when button two is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once button two pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button two pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button two is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button two is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
if button two is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
when button two is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once button two pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button two pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button two on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button two on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button two is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button two is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
if button two is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
when button two is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once button two pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button two pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button two is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button two is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
if button two is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
when button two is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once button two pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button two pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button two on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button two on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button two on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button two on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button two on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button two on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button two on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button two on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button two on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button two on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button two on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button two on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button two on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button two gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button two gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button two on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button two is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button two is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button two is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
if button two is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
when button two is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once button two pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button two pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button two is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button two is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
if button two is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
when button two is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once button two pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button two pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button two on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button two on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button two is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button two is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
if button two is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
when button two is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once button two pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button two pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button two is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button two is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
if button two is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
when button two is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once button two pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button two pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button two on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button two on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button two on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button two on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button two on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button two on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button two on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button two on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button two on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button two on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button two on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button two on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button two on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button two gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button two gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button two on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button two is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button two is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button two is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
if button two is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
when button two is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once button two pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button two pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button two is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button two is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
if button two is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
when button two is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once button two pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button two pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button two on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button two on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button two is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button two is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
if button two is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
when button two is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once button two pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button two pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button two is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button two is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
if button two is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
when button two is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once button two pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button two pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button two on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button two on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button two on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button two on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button two on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button two on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button two on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button two on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button two on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button two on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button two on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button two on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button two on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button two gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button two gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button two on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button two is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button two is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button two is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
if button two is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
when button two is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once button two pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button two pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button two is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button two is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
if button two is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
when button two is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once button two pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button two pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button two on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button two on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button two is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button two is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
if button two is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
when button two is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once button two pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button two pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button two is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button two is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
if button two is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
when button two is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once button two pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button two pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button two on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button two on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button two on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button two on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button two on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button two on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button two on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button two on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button two on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button two on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button two on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button two on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button two on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button two gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button two gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button two on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button two is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button two is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
when streamdeck button two is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
if button two is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
when button two is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once button two pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button two pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
if streamdeck button two is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
when streamdeck button two is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
if button two is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
when button two is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once button two pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button two pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone push the button two on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button two on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
if streamdeck button two is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
when streamdeck button two is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
if button two is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
when button two is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once button two pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button two pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
if streamdeck button two is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
when streamdeck button two is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
if button two is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
when button two is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once button two pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button two pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone push the button two on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone press the button two on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button two on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button two on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button two on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone click the button two on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone press the button two on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button two on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button two on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button two on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone click the button two on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button two on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone press the button two on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button two gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button two gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Should someone click the button two on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button two is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', half)};
if streamdeck button two is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button two is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
if button two is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
when button two is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once button two pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button two pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button two is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button two is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
if button two is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
when button two is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once button two pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button two pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button two on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button two on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button two is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button two is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
if button two is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
when button two is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once button two pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button two pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button two is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button two is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
if button two is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
when button two is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once button two pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button two pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button two on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button two on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button two on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button two on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button two on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button two on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button two on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button two on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button two on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button two on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button two on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button two on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button two on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button two gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button two gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button two on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button two is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button two is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button two is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
if button two is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
when button two is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once button two pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button two pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button two is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button two is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
if button two is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
when button two is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once button two pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button two pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button two on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button two on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button two is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button two is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
if button two is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
when button two is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once button two pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button two pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button two is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button two is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
if button two is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
when button two is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once button two pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button two pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button two on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button two on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button two on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button two on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button two on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button two on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button two on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button two on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button two on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button two on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button two on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button two on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button two on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button two gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button two gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button two on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button two is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button two is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button two is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
if button two is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
when button two is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once button two pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button two pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button two is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button two is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
if button two is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
when button two is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once button two pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button two pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button two on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button two on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button two is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button two is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
if button two is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
when button two is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once button two pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button two pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button two is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button two is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
if button two is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
when button two is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once button two pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button two pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button two on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button two on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button two on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button two on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button two on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button two on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button two on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button two on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button two on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button two on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button two on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button two on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button two on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button two gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button two gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button two on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button two is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button two is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button two is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
if button two is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
when button two is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once button two pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button two pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button two is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button two is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
if button two is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
when button two is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once button two pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button two pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button two on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button two on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button two is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button two is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
if button two is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
when button two is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once button two pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button two pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button two is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button two is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
if button two is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
when button two is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once button two pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button two pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button two on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button two on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button two on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button two on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button two on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button two on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button two on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button two on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button two on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button two on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button two on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button two on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button two on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button two gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button two gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button two on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button two is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button two is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button two is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
if button two is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
when button two is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once button two pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button two pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button two is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button two is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
if button two is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
when button two is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once button two pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button two pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button two on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button two on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button two is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button two is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
if button two is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
when button two is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once button two pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button two pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button two is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button two is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
if button two is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
when button two is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once button two pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button two pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button two on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button two on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button two on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button two on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button two on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button two on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button two on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button two on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button two on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button two on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button two on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button two on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button two on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button two gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button two gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button two on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button two is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button two is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button two is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
if button two is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
when button two is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once button two pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button two pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button two is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button two is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
if button two is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
when button two is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once button two pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button two pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button two on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button two on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button two is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button two is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
if button two is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
when button two is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once button two pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button two pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button two is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button two is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
if button two is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
when button two is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once button two pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button two pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button two on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button two on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button two on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button two on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button two on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button two on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button two on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button two on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button two on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button two on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button two on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button two on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button two on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button two gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button two gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button two on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button two is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button two is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
when streamdeck button two is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
if button two is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
when button two is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once button two pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button two pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
if streamdeck button two is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
when streamdeck button two is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
if button two is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
when button two is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once button two pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button two pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone push the button two on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button two on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone press the button two on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button two on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button two on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button two on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone click the button two on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button two on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
if streamdeck button two is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
when streamdeck button two is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
if button two is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
when button two is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once button two pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button two pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
if streamdeck button two is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
when streamdeck button two is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
if button two is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
when button two is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once button two pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button two pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone push the button two on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button two on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone press the button two on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button two on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button two on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button two on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone click the button two on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button two on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone press the button two on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button two on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button two on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button two on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone click the button two on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button two on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone press the button two on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button two on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button two on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button two on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button two gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button two gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Should someone click the button two on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button two on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button two is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
Once the button two on the StreamDeck is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 2) => {philipshue.writeProperty('brightness', full)};
if streamdeck button three is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button three is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
if button three is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
when button three is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once button three pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button three pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button three is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button three is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
if button three is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
when button three is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once button three pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button three pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button three on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button three on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button three is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button three is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
if button three is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
when button three is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once button three pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button three pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button three is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button three is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
if button three is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
when button three is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once button three pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button three pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button three on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button three on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button three on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button three on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button three on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button three on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button three on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button three on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button three on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button three on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button three on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button three on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button three on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button three gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button three gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button three on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button three is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button three is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button three is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
if button three is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
when button three is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once button three pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button three pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button three is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button three is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
if button three is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
when button three is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once button three pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button three pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button three on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button three on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button three is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button three is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
if button three is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
when button three is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once button three pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button three pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button three is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button three is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
if button three is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
when button three is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once button three pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button three pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button three on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button three on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button three on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button three on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button three on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button three on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button three on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button three on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button three on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button three on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button three on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button three on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button three on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button three gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button three gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button three on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button three is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button three is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button three is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
if button three is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
when button three is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once button three pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button three pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button three is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button three is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
if button three is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
when button three is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once button three pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button three pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button three on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button three on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button three is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button three is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
if button three is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
when button three is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once button three pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button three pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button three is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button three is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
if button three is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
when button three is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once button three pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button three pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button three on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button three on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button three on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button three on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button three on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button three on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button three on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button three on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button three on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button three on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button three on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button three on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button three on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button three gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button three gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button three on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button three is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button three is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button three is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
if button three is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
when button three is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once button three pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button three pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button three is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button three is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
if button three is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
when button three is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once button three pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button three pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button three on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button three on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button three is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button three is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
if button three is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
when button three is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once button three pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button three pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button three is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button three is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
if button three is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
when button three is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once button three pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button three pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button three on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button three on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button three on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button three on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button three on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button three on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button three on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button three on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button three on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button three on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button three on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button three on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button three on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button three gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button three gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button three on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button three is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button three is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button three is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
if button three is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
when button three is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once button three pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button three pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button three is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button three is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
if button three is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
when button three is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once button three pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button three pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button three on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button three on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button three is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button three is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
if button three is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
when button three is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once button three pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button three pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button three is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button three is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
if button three is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
when button three is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once button three pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button three pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button three on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button three on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button three on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button three on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button three on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button three on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button three on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button three on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button three on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button three on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button three on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button three on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button three on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button three gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button three gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button three on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button three is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button three is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button three is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
if button three is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
when button three is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once button three pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button three pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button three is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button three is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
if button three is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
when button three is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once button three pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button three pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button three on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button three on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button three is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button three is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
if button three is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
when button three is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once button three pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button three pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button three is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button three is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
if button three is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
when button three is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once button three pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button three pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button three on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button three on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button three on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button three on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button three on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button three on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button three on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button three on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button three on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button three on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button three on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button three on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button three on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button three gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button three gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button three on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button three is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button three is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button three is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
if button three is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
when button three is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once button three pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button three pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button three is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button three is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
if button three is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
when button three is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once button three pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button three pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button three on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button three on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button three is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button three is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
if button three is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
when button three is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once button three pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button three pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button three is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button three is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
if button three is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
when button three is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once button three pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button three pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button three on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button three on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button three on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button three on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button three on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button three on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button three on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button three on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button three on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button three on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button three on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button three on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button three on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button three gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button three gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button three on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button three is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button three is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
when streamdeck button three is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
if button three is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
when button three is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once button three pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button three pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
if streamdeck button three is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
when streamdeck button three is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
if button three is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
when button three is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once button three pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button three pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone push the button three on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button three on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
if streamdeck button three is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
when streamdeck button three is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
if button three is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
when button three is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once button three pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button three pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
if streamdeck button three is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
when streamdeck button three is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
if button three is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
when button three is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once button three pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button three pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone push the button three on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone press the button three on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button three on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button three on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button three on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone click the button three on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone press the button three on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button three on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button three on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button three on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone click the button three on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button three on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone press the button three on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button three gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button three gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Should someone click the button three on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button three is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', half)};
if streamdeck button three is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button three is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
if button three is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
when button three is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once button three pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button three pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button three is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button three is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
if button three is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
when button three is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once button three pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button three pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button three on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button three on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button three is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button three is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
if button three is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
when button three is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once button three pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button three pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button three is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button three is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
if button three is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
when button three is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once button three pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button three pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button three on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button three on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button three on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button three on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button three on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button three on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button three on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button three on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button three on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button three on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button three on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button three on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button three on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button three gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button three gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button three on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button three is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button three is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button three is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
if button three is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
when button three is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once button three pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button three pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button three is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button three is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
if button three is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
when button three is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once button three pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button three pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button three on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button three on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button three is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button three is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
if button three is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
when button three is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once button three pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button three pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button three is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button three is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
if button three is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
when button three is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once button three pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button three pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button three on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button three on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button three on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button three on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button three on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button three on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button three on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button three on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button three on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button three on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button three on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button three on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button three on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button three gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button three gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button three on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button three is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button three is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button three is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
if button three is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
when button three is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once button three pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button three pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button three is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button three is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
if button three is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
when button three is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once button three pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button three pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button three on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button three on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button three is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button three is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
if button three is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
when button three is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once button three pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button three pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button three is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button three is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
if button three is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
when button three is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once button three pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button three pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button three on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button three on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button three on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button three on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button three on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button three on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button three on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button three on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button three on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button three on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button three on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button three on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button three on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button three gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button three gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button three on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button three is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button three is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button three is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
if button three is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
when button three is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once button three pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button three pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button three is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button three is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
if button three is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
when button three is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once button three pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button three pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button three on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button three on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button three is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button three is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
if button three is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
when button three is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once button three pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button three pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button three is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button three is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
if button three is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
when button three is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once button three pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button three pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button three on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button three on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button three on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button three on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button three on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button three on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button three on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button three on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button three on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button three on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button three on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button three on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button three on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button three gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button three gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button three on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button three is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button three is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button three is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
if button three is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
when button three is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once button three pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button three pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button three is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button three is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
if button three is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
when button three is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once button three pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button three pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button three on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button three on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button three is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button three is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
if button three is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
when button three is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once button three pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button three pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button three is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button three is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
if button three is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
when button three is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once button three pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button three pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button three on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button three on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button three on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button three on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button three on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button three on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button three on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button three on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button three on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button three on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button three on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button three on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button three on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button three gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button three gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button three on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button three is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button three is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button three is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
if button three is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
when button three is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once button three pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button three pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button three is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button three is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
if button three is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
when button three is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once button three pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button three pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button three on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button three on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button three is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button three is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
if button three is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
when button three is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once button three pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button three pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button three is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button three is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
if button three is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
when button three is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once button three pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button three pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button three on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button three on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button three on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button three on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button three on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button three on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button three on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button three on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button three on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button three on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button three on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button three on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button three on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button three gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button three gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button three on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button three is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button three is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
when streamdeck button three is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
if button three is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
when button three is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once button three pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button three pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
if streamdeck button three is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
when streamdeck button three is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
if button three is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
when button three is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once button three pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button three pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone push the button three on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button three on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone press the button three on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button three on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button three on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button three on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone click the button three on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button three on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
if streamdeck button three is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
when streamdeck button three is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
if button three is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
when button three is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once button three pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button three pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
if streamdeck button three is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
when streamdeck button three is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
if button three is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
when button three is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once button three pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button three pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone push the button three on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button three on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone press the button three on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button three on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button three on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button three on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone click the button three on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button three on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone press the button three on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button three on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button three on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button three on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone click the button three on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button three on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone press the button three on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button three on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button three on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button three on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button three gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button three gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Should someone click the button three on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button three on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button three is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
Once the button three on the StreamDeck is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 3) => {philipshue.writeProperty('brightness', full)};
if streamdeck button four is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button four is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
if button four is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
when button four is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once button four pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button four pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button four is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button four is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
if button four is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
when button four is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once button four pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button four pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button four on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button four on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button four is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button four is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
if button four is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
when button four is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once button four pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button four pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button four is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button four is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
if button four is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
when button four is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once button four pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button four pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button four on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button four on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button four on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button four on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button four on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button four on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button four on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button four on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button four on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button four on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button four on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button four on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button four on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button four gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button four gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button four on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button four is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button four is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button four is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
if button four is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
when button four is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once button four pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button four pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button four is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button four is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
if button four is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
when button four is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once button four pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button four pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button four on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button four on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button four is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button four is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
if button four is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
when button four is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once button four pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button four pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button four is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button four is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
if button four is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
when button four is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once button four pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button four pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button four on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button four on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button four on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button four on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button four on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button four on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button four on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button four on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button four on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button four on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button four on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button four on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button four on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button four gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button four gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button four on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button four is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button four is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button four is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
if button four is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
when button four is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once button four pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button four pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button four is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button four is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
if button four is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
when button four is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once button four pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button four pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button four on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button four on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button four is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button four is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
if button four is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
when button four is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once button four pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button four pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button four is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button four is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
if button four is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
when button four is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once button four pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button four pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button four on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button four on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button four on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button four on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button four on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button four on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button four on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button four on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button four on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button four on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button four on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button four on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button four on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button four gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button four gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button four on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button four is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button four is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button four is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
if button four is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
when button four is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once button four pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button four pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button four is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button four is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
if button four is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
when button four is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once button four pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button four pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button four on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button four on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button four is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button four is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
if button four is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
when button four is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once button four pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button four pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button four is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button four is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
if button four is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
when button four is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once button four pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button four pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button four on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button four on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button four on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button four on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button four on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button four on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button four on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button four on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button four on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button four on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button four on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button four on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button four on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button four gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button four gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button four on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button four is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button four is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button four is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
if button four is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
when button four is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once button four pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button four pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button four is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button four is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
if button four is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
when button four is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once button four pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button four pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button four on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button four on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button four is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button four is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
if button four is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
when button four is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once button four pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button four pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button four is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button four is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
if button four is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
when button four is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once button four pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button four pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button four on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button four on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button four on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button four on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button four on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button four on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button four on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button four on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button four on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button four on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button four on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button four on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button four on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button four gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button four gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button four on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button four is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button four is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button four is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
if button four is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
when button four is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once button four pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button four pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button four is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button four is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
if button four is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
when button four is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once button four pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button four pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button four on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button four on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button four is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button four is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
if button four is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
when button four is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once button four pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button four pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button four is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button four is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
if button four is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
when button four is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once button four pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button four pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button four on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button four on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button four on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button four on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button four on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button four on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button four on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button four on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button four on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button four on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button four on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button four on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button four on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button four gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button four gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button four on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button four is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button four is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button four is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
if button four is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
when button four is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once button four pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button four pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button four is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button four is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
if button four is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
when button four is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once button four pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button four pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button four on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button four on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button four is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button four is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
if button four is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
when button four is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once button four pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button four pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button four is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button four is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
if button four is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
when button four is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once button four pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button four pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button four on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button four on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button four on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button four on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button four on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button four on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button four on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button four on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button four on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button four on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button four on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button four on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button four on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button four gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button four gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button four on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button four is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button four is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
when streamdeck button four is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
if button four is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
when button four is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once button four pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button four pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
if streamdeck button four is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
when streamdeck button four is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
if button four is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
when button four is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once button four pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button four pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone push the button four on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button four on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
if streamdeck button four is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
when streamdeck button four is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
if button four is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
when button four is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once button four pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button four pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
if streamdeck button four is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
when streamdeck button four is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
if button four is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
when button four is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once button four pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button four pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone push the button four on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone press the button four on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button four on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button four on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button four on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone click the button four on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone press the button four on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button four on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button four on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button four on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone click the button four on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button four on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone press the button four on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button four gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button four gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Should someone click the button four on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button four is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', half)};
if streamdeck button four is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button four is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
if button four is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
when button four is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once button four pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button four pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button four is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button four is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
if button four is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
when button four is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once button four pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button four pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button four on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button four on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button four is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button four is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
if button four is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
when button four is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once button four pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button four pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button four is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button four is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
if button four is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
when button four is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once button four pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button four pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button four on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button four on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button four on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button four on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button four on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button four on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button four on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button four on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button four on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button four on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button four on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button four on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button four on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button four gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button four gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button four on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button four is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button four is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button four is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
if button four is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
when button four is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once button four pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button four pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button four is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button four is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
if button four is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
when button four is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once button four pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button four pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button four on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button four on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button four is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button four is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
if button four is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
when button four is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once button four pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button four pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button four is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button four is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
if button four is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
when button four is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once button four pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button four pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button four on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button four on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button four on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button four on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button four on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button four on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button four on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button four on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button four on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button four on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button four on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button four on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button four on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button four gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button four gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button four on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button four is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button four is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button four is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
if button four is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
when button four is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once button four pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button four pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button four is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button four is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
if button four is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
when button four is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once button four pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button four pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button four on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button four on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button four is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button four is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
if button four is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
when button four is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once button four pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button four pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button four is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button four is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
if button four is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
when button four is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once button four pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button four pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button four on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button four on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button four on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button four on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button four on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button four on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button four on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button four on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button four on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button four on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button four on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button four on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button four on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button four gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button four gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button four on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button four is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button four is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button four is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
if button four is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
when button four is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once button four pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button four pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button four is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button four is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
if button four is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
when button four is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once button four pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button four pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button four on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button four on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button four is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button four is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
if button four is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
when button four is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once button four pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button four pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button four is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button four is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
if button four is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
when button four is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once button four pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button four pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button four on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button four on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button four on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button four on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button four on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button four on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button four on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button four on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button four on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button four on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button four on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button four on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button four on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button four gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button four gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button four on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button four is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button four is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button four is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
if button four is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
when button four is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once button four pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button four pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button four is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button four is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
if button four is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
when button four is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once button four pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button four pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button four on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button four on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button four is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button four is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
if button four is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
when button four is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once button four pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button four pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button four is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button four is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
if button four is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
when button four is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once button four pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button four pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button four on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button four on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button four on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button four on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button four on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button four on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button four on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button four on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button four on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button four on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button four on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button four on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button four on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button four gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button four gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button four on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button four is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button four is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button four is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
if button four is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
when button four is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once button four pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button four pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button four is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button four is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
if button four is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
when button four is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once button four pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button four pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button four on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button four on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button four is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button four is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
if button four is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
when button four is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once button four pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button four pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button four is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button four is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
if button four is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
when button four is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once button four pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button four pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button four on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button four on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button four on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button four on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button four on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button four on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button four on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button four on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button four on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button four on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button four on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button four on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button four on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button four gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button four gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button four on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button four is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button four is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
when streamdeck button four is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
if button four is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
when button four is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once button four pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button four pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
if streamdeck button four is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
when streamdeck button four is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
if button four is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
when button four is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once button four pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button four pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone push the button four on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button four on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone press the button four on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button four on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button four on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button four on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone click the button four on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button four on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
if streamdeck button four is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
when streamdeck button four is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
if button four is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
when button four is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once button four pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button four pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
if streamdeck button four is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
when streamdeck button four is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
if button four is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
when button four is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once button four pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button four pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone push the button four on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button four on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone press the button four on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button four on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button four on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button four on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone click the button four on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button four on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone press the button four on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button four on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button four on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button four on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone click the button four on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button four on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone press the button four on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button four on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button four on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button four on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button four gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button four gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Should someone click the button four on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button four on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button four is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
Once the button four on the StreamDeck is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 4) => {philipshue.writeProperty('brightness', full)};
if streamdeck button five is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button five is pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
if button five is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
when button five is pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once button five pressed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button five pressed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button five is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button five is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
if button five is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
when button five is pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once button five pushed in streamdeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button five pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button five on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button five on the StreamDeck, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is pushed, change brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button five is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button five is pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
if button five is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
when button five is pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once button five pressed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button five pressed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button five is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
when streamdeck button five is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
if button five is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
when button five is pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once button five pushed in streamdeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once streamdeck button five pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone push the button five on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button five on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button five on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is pressed, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button five on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button five on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is hit, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button five on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is clicked, turn brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button five on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button five on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is pressed, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button five on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button five on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is hit, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button five on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button five on the StreamDeck, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is clicked, set brightness to ten percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone press the button five on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is hit, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
If the StreamDeck button five gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
When the StreamDeck button five gets clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Should someone click the button five on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
In case the StreamDeck button five is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to ten percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ten percent)};
if streamdeck button five is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button five is pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
if button five is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
when button five is pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once button five pressed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button five pressed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button five is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button five is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
if button five is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
when button five is pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once button five pushed in streamdeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button five pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button five on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button five on the StreamDeck, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is pushed, change brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button five is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button five is pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
if button five is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
when button five is pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once button five pressed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button five pressed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button five is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
when streamdeck button five is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
if button five is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
when button five is pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once button five pushed in streamdeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once streamdeck button five pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone push the button five on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button five on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button five on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is pressed, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button five on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button five on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is hit, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button five on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is clicked, turn brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button five on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button five on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is pressed, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button five on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button five on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is hit, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button five on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button five on the StreamDeck, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is clicked, set brightness to twenty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone press the button five on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is hit, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
If the StreamDeck button five gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
When the StreamDeck button five gets clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Should someone click the button five on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
In case the StreamDeck button five is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to twenty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', twenty percent)};
if streamdeck button five is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button five is pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
if button five is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
when button five is pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once button five pressed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button five pressed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button five is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button five is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
if button five is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
when button five is pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once button five pushed in streamdeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button five pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button five on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button five on the StreamDeck, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is pushed, change brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button five is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button five is pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
if button five is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
when button five is pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once button five pressed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button five pressed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button five is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
when streamdeck button five is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
if button five is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
when button five is pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once button five pushed in streamdeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once streamdeck button five pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone push the button five on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button five on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button five on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is pressed, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button five on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button five on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is hit, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button five on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is clicked, turn brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button five on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button five on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is pressed, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button five on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button five on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is hit, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button five on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button five on the StreamDeck, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is clicked, set brightness to quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone press the button five on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is hit, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
If the StreamDeck button five gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
When the StreamDeck button five gets clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Should someone click the button five on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
In case the StreamDeck button five is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', quarter)};
if streamdeck button five is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button five is pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
if button five is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
when button five is pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once button five pressed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button five pressed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button five is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button five is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
if button five is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
when button five is pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once button five pushed in streamdeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button five pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button five on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button five on the StreamDeck, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is pushed, change brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button five is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button five is pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
if button five is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
when button five is pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once button five pressed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button five pressed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button five is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
when streamdeck button five is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
if button five is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
when button five is pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once button five pushed in streamdeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once streamdeck button five pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone push the button five on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button five on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button five on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is pressed, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button five on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button five on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is hit, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button five on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is clicked, turn brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button five on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button five on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is pressed, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button five on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button five on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is hit, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button five on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button five on the StreamDeck, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is clicked, set brightness to thirty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone press the button five on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is hit, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
If the StreamDeck button five gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
When the StreamDeck button five gets clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Should someone click the button five on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
In case the StreamDeck button five is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to thirty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', thirty percent)};
if streamdeck button five is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button five is pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
if button five is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
when button five is pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once button five pressed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button five pressed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button five is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button five is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
if button five is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
when button five is pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once button five pushed in streamdeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button five pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button five on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button five on the StreamDeck, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is pushed, change brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button five is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button five is pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
if button five is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
when button five is pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once button five pressed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button five pressed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button five is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
when streamdeck button five is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
if button five is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
when button five is pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once button five pushed in streamdeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once streamdeck button five pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone push the button five on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button five on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button five on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is pressed, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button five on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button five on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is hit, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button five on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is clicked, turn brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button five on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button five on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is pressed, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button five on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button five on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is hit, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button five on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button five on the StreamDeck, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is clicked, set brightness to one third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone press the button five on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is hit, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
If the StreamDeck button five gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
When the StreamDeck button five gets clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Should someone click the button five on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
In case the StreamDeck button five is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to one third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', one third)};
if streamdeck button five is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button five is pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
if button five is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
when button five is pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once button five pressed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button five pressed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button five is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button five is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
if button five is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
when button five is pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once button five pushed in streamdeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button five pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button five on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button five on the StreamDeck, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is pushed, change brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button five is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button five is pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
if button five is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
when button five is pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once button five pressed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button five pressed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button five is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
when streamdeck button five is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
if button five is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
when button five is pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once button five pushed in streamdeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once streamdeck button five pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone push the button five on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button five on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button five on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is pressed, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button five on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button five on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is hit, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button five on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is clicked, turn brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button five on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button five on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is pressed, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button five on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button five on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is hit, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button five on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button five on the StreamDeck, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is clicked, set brightness to fourty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone press the button five on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is hit, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
If the StreamDeck button five gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
When the StreamDeck button five gets clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Should someone click the button five on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
In case the StreamDeck button five is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to fourty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fourty percent)};
if streamdeck button five is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button five is pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
if button five is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
when button five is pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once button five pressed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button five pressed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button five is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button five is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
if button five is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
when button five is pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once button five pushed in streamdeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button five pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button five on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button five on the StreamDeck, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is pushed, change brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button five is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button five is pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
if button five is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
when button five is pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once button five pressed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button five pressed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button five is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
when streamdeck button five is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
if button five is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
when button five is pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once button five pushed in streamdeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once streamdeck button five pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone push the button five on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button five on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button five on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is pressed, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button five on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button five on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is hit, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button five on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is clicked, turn brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button five on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button five on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is pressed, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button five on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button five on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is hit, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button five on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button five on the StreamDeck, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is clicked, set brightness to fifty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone press the button five on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is hit, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
If the StreamDeck button five gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
When the StreamDeck button five gets clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Should someone click the button five on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
In case the StreamDeck button five is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to fifty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', fifty percent)};
if streamdeck button five is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
when streamdeck button five is pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
if button five is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
when button five is pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once button five pressed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button five pressed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
if streamdeck button five is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
when streamdeck button five is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
if button five is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
when button five is pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once button five pushed in streamdeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button five pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone push the button five on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button five on the StreamDeck, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is pushed, change brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
if streamdeck button five is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
when streamdeck button five is pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
if button five is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
when button five is pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once button five pressed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button five pressed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
if streamdeck button five is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
when streamdeck button five is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
if button five is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
when button five is pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once button five pushed in streamdeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once streamdeck button five pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone push the button five on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone press the button five on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button five on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is pressed, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button five on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button five on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is hit, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone click the button five on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is clicked, turn brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone press the button five on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button five on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is pressed, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button five on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button five on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is hit, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone click the button five on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button five on the StreamDeck, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is clicked, set brightness to half in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone press the button five on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is hit, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
If the StreamDeck button five gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
When the StreamDeck button five gets clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Should someone click the button five on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
In case the StreamDeck button five is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to half .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', half)};
if streamdeck button five is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button five is pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
if button five is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
when button five is pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once button five pressed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button five pressed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button five is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button five is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
if button five is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
when button five is pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once button five pushed in streamdeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button five pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button five on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button five on the StreamDeck, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is pushed, change brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button five is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button five is pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
if button five is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
when button five is pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once button five pressed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button five pressed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button five is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
when streamdeck button five is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
if button five is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
when button five is pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once button five pushed in streamdeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once streamdeck button five pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone push the button five on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button five on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button five on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is pressed, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button five on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button five on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is hit, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button five on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is clicked, turn brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button five on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button five on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is pressed, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button five on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button five on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is hit, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button five on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button five on the StreamDeck, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is clicked, set brightness to sixty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone press the button five on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is hit, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
If the StreamDeck button five gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
When the StreamDeck button five gets clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Should someone click the button five on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
In case the StreamDeck button five is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to sixty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', sixty percent)};
if streamdeck button five is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button five is pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
if button five is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
when button five is pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once button five pressed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button five pressed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button five is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button five is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
if button five is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
when button five is pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once button five pushed in streamdeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button five pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button five on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button five on the StreamDeck, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is pushed, change brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button five is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button five is pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
if button five is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
when button five is pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once button five pressed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button five pressed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button five is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
when streamdeck button five is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
if button five is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
when button five is pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once button five pushed in streamdeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once streamdeck button five pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone push the button five on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button five on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button five on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is pressed, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button five on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button five on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is hit, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button five on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is clicked, turn brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button five on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button five on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is pressed, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button five on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button five on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is hit, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button five on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button five on the StreamDeck, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is clicked, set brightness to two third in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone press the button five on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is hit, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
If the StreamDeck button five gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
When the StreamDeck button five gets clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Should someone click the button five on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
In case the StreamDeck button five is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to two third .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', two third)};
if streamdeck button five is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button five is pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
if button five is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
when button five is pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once button five pressed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button five pressed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button five is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button five is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
if button five is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
when button five is pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once button five pushed in streamdeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button five pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button five on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button five on the StreamDeck, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is pushed, change brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button five is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button five is pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
if button five is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
when button five is pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once button five pressed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button five pressed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button five is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
when streamdeck button five is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
if button five is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
when button five is pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once button five pushed in streamdeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once streamdeck button five pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone push the button five on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button five on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button five on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is pressed, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button five on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button five on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is hit, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button five on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is clicked, turn brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button five on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button five on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is pressed, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button five on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button five on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is hit, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button five on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button five on the StreamDeck, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is clicked, set brightness to seventy percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone press the button five on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is hit, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
If the StreamDeck button five gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
When the StreamDeck button five gets clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Should someone click the button five on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
In case the StreamDeck button five is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to seventy percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', seventy percent)};
if streamdeck button five is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button five is pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
if button five is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
when button five is pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once button five pressed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button five pressed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button five is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button five is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
if button five is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
when button five is pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once button five pushed in streamdeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button five pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button five on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button five on the StreamDeck, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is pushed, change brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button five is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button five is pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
if button five is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
when button five is pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once button five pressed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button five pressed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button five is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
when streamdeck button five is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
if button five is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
when button five is pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once button five pushed in streamdeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once streamdeck button five pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone push the button five on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button five on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button five on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is pressed, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button five on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button five on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is hit, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button five on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is clicked, turn brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button five on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button five on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is pressed, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button five on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button five on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is hit, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button five on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button five on the StreamDeck, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is clicked, set brightness to three quarter in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone press the button five on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is hit, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
If the StreamDeck button five gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
When the StreamDeck button five gets clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Should someone click the button five on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
In case the StreamDeck button five is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to three quarter .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', three quarter)};
if streamdeck button five is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button five is pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
if button five is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
when button five is pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once button five pressed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button five pressed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button five is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button five is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
if button five is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
when button five is pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once button five pushed in streamdeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button five pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button five on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button five on the StreamDeck, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is pushed, change brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button five is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button five is pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
if button five is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
when button five is pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once button five pressed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button five pressed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button five is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
when streamdeck button five is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
if button five is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
when button five is pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once button five pushed in streamdeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once streamdeck button five pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone push the button five on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button five on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button five on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is pressed, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button five on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button five on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is hit, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button five on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is clicked, turn brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button five on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button five on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is pressed, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button five on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button five on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is hit, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button five on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button five on the StreamDeck, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is clicked, set brightness to eighty percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone press the button five on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is hit, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
If the StreamDeck button five gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
When the StreamDeck button five gets clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Should someone click the button five on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
In case the StreamDeck button five is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to eighty percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', eighty percent)};
if streamdeck button five is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button five is pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
if button five is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
when button five is pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once button five pressed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button five pressed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button five is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button five is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
if button five is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
when button five is pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once button five pushed in streamdeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button five pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button five on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button five on the StreamDeck, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is pushed, change brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button five is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button five is pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
if button five is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
when button five is pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once button five pressed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button five pressed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button five is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
when streamdeck button five is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
if button five is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
when button five is pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once button five pushed in streamdeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once streamdeck button five pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone push the button five on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button five on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button five on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is pressed, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button five on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button five on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is hit, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button five on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is clicked, turn brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button five on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button five on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is pressed, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button five on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button five on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is hit, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button five on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button five on the StreamDeck, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is clicked, set brightness to ninety percent in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone press the button five on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is hit, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
If the StreamDeck button five gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
When the StreamDeck button five gets clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Should someone click the button five on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
In case the StreamDeck button five is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to ninety percent .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', ninety percent)};
if streamdeck button five is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
when streamdeck button five is pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
if button five is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
when button five is pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once button five pressed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button five pressed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
if streamdeck button five is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
when streamdeck button five is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
if button five is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
when button five is pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once button five pushed in streamdeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button five pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone push the button five on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button five on the StreamDeck, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is pushed, change brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone press the button five on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button five on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is pressed, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button five on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button five on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is hit, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone click the button five on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button five on the StreamDeck, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is clicked, turn philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
if streamdeck button five is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
when streamdeck button five is pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
if button five is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
when button five is pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once button five pressed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button five pressed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
if streamdeck button five is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
when streamdeck button five is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
if button five is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
when button five is pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once button five pushed in streamdeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once streamdeck button five pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone push the button five on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone pushes the button five on the StreamDeck, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is pushed, change philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone press the button five on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button five on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is pressed, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button five on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button five on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is hit, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone click the button five on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button five on the StreamDeck, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is clicked, turn brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone press the button five on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button five on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is pressed, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button five on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button five on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is hit, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone click the button five on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button five on the StreamDeck, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is clicked, set brightness to full in philips hue .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone press the button five on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone presses the button five on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is pressed, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone hit the button five on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone hits the button five on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is hit, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
If the StreamDeck button five gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
When the StreamDeck button five gets clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Should someone click the button five on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Whenever someone clicks the button five on the StreamDeck, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
In case the StreamDeck button five is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
Once the button five on the StreamDeck is clicked, set philips hue brightness to full .	streamdeck.subscribeEvent('buttonPress', 5) => {philipshue.writeProperty('brightness', full)};
